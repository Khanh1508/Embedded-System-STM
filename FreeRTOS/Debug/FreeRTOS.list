
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049e0  20000074  08006078  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a54  08006078  00024a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121be  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b1  00000000  00000000  00032262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00034b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00035988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038d5  00000000  00000000  00036710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe93  00000000  00000000  00039fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bbbf  00000000  00000000  00049e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5a37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  000e5a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e9c 	.word	0x08005e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005e9c 	.word	0x08005e9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <adc_init>:
void Task1_function(void *argument);
void Task2_function(void *argument);
void Timer1_function(void *argument);
void Timer2_func(void *argument);
void adc_init()
{
 8000594:	b480      	push	{r7}
 8000596:	b08b      	sub	sp, #44	; 0x2c
 8000598:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <adc_init+0xec>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a37      	ldr	r2, [pc, #220]	; (8000680 <adc_init+0xec>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <adc_init+0xec>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
	uint32_t* APB2ENR=(uint32_t*)0x40023844;
 80005b6:	4b33      	ldr	r3, [pc, #204]	; (8000684 <adc_init+0xf0>)
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
	*APB2ENR|=(1<<8);//ADC1 clock enable
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c4:	601a      	str	r2, [r3, #0]

	uint32_t* CCR=(uint32_t*)0x40012304;
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <adc_init+0xf4>)
 80005c8:	623b      	str	r3, [r7, #32]
	*CCR|=(2<<16);//ADC prescaler- 10: PCLK2 divided by 6 ADC_CLK = 90/6 = 15MHz
 80005ca:	6a3b      	ldr	r3, [r7, #32]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	601a      	str	r2, [r3, #0]

	uint32_t* CR1=(uint32_t*)0x40012004;
 80005d6:	4b2d      	ldr	r3, [pc, #180]	; (800068c <adc_init+0xf8>)
 80005d8:	61fb      	str	r3, [r7, #28]
	*CR1|=(1<<8);//Scan mode > 1 channel
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	601a      	str	r2, [r3, #0]
	*CR1|=(00<<24);//Set resolution 12-bit (15 ADCCLK cycles) 0<=ADC value <= 4095
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	601a      	str	r2, [r3, #0]

	uint32_t* CR2=(uint32_t*)0x40012008;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <adc_init+0xfc>)
 80005f0:	61bb      	str	r3, [r7, #24]

	*CR2|=(1<<1); //1: Continuous conversion mode
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f043 0202 	orr.w	r2, r3, #2
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	601a      	str	r2, [r3, #0]
	*CR2|=(1<<8); //Direct memory access mode (for single ADC mode)
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	601a      	str	r2, [r3, #0]
	*CR2|=(1<<9);
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	601a      	str	r2, [r3, #0]
	*CR2|=(1<<10);//End of conversion selection
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	601a      	str	r2, [r3, #0]
	*CR2&=~(1<<11);//Data alignment
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	601a      	str	r2, [r3, #0]

	uint32_t* SMPR2=(uint32_t*)0x40012010;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <adc_init+0x100>)
 8000630:	617b      	str	r3, [r7, #20]
	*SMPR2|=(000<<3);  //Channel x sampling time selection -> 000: 3 cycles
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	601a      	str	r2, [r3, #0]

	uint32_t* SQR1=(uint32_t*)0x4001202c;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <adc_init+0x104>)
 800063c:	613b      	str	r3, [r7, #16]
	*SQR1|=(0000<<20); // Regular channel sequence length - 0000 :1 conversion
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	601a      	str	r2, [r3, #0]

	uint32_t* SQR3=(uint32_t*)0x40012034;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <adc_init+0x108>)
 8000648:	60fb      	str	r3, [r7, #12]
	*SQR3|=(1<<0);//SQ1  1st conversion in regular sequence
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f043 0201 	orr.w	r2, r3, #1
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	601a      	str	r2, [r3, #0]

	uint32_t* MODER=(uint32_t*)0x40020000;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <adc_init+0x10c>)
 8000658:	60bb      	str	r3, [r7, #8]
	*MODER |=(11<<2); //Set Analog mode for PA1 ADC1_1
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f043 022c 	orr.w	r2, r3, #44	; 0x2c
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	601a      	str	r2, [r3, #0]

	*CR2|=(1<<0); // Enable ADC  **Always set this bit in the end
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f043 0201 	orr.w	r2, r3, #1
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	372c      	adds	r7, #44	; 0x2c
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40023844 	.word	0x40023844
 8000688:	40012304 	.word	0x40012304
 800068c:	40012004 	.word	0x40012004
 8000690:	40012008 	.word	0x40012008
 8000694:	40012010 	.word	0x40012010
 8000698:	4001202c 	.word	0x4001202c
 800069c:	40012034 	.word	0x40012034
 80006a0:	40020000 	.word	0x40020000

080006a4 <adc_start>:

void adc_start(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	uint32_t* CR2=(uint32_t*)0x40012008;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <adc_start+0x24>)
 80006ac:	607b      	str	r3, [r7, #4]
	*CR2|=(1<<30);//Start conversion of regular channels
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40012008 	.word	0x40012008

080006cc <adc_read>:

uint32_t adc_read()
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
	uint32_t* SR=(uint32_t*)0x40012000;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <adc_read+0x2c>)
 80006d4:	607b      	str	r3, [r7, #4]
	*SR &=~(1); //Clear SR before start conversion
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 0201 	bic.w	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
	uint32_t* DR= (uint32_t*)0x4001204c;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <adc_read+0x30>)
 80006e4:	603b      	str	r3, [r7, #0]
	//uint16_t* DR= (uint16_t*)0x4001204c;
	return *DR;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	4001204c 	.word	0x4001204c

08000700 <main>:

int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  //HAL_Init();
  SystemClock_Config();
 8000704:	f000 f852 	bl	80007ac <SystemClock_Config>
  MX_GPIO_Init();
 8000708:	f000 f8e4 	bl	80008d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800070c:	f000 f8b8 	bl	8000880 <MX_USART2_UART_Init>
  adc_init();
 8000710:	f7ff ff40 	bl	8000594 <adc_init>
  osKernelInitialize();
 8000714:	f001 fe0e 	bl	8002334 <osKernelInitialize>
  /* creation of Timer1 */
  Timer1Handle = osTimerNew(Timer1_function, osTimerPeriodic, NULL, &Timer1_attributes);
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <main+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	4816      	ldr	r0, [pc, #88]	; (8000778 <main+0x78>)
 8000720:	f001 ff14 	bl	800254c <osTimerNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <main+0x7c>)
 8000728:	6013      	str	r3, [r2, #0]
  /* creation of Timer2 */
  Timer2Handle = osTimerNew(Timer2_func, osTimerPeriodic, NULL, &Timer2_attributes);
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <main+0x80>)
 800072c:	2200      	movs	r2, #0
 800072e:	2101      	movs	r1, #1
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <main+0x84>)
 8000732:	f001 ff0b 	bl	800254c <osTimerNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <main+0x88>)
 800073a:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_function, NULL, &Task1_attributes);
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <main+0x8c>)
 800073e:	2100      	movs	r1, #0
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <main+0x90>)
 8000742:	f001 fe41 	bl	80023c8 <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <main+0x94>)
 800074a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_function, NULL, &Task2_attributes);
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <main+0x98>)
 800074e:	2100      	movs	r1, #0
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0x9c>)
 8000752:	f001 fe39 	bl	80023c8 <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <main+0xa0>)
 800075a:	6013      	str	r3, [r2, #0]
  /* Start scheduler */

/* creation of adc_queue */
  adc_queueHandle = osMessageQueueNew (16, sizeof(uint32_t), &adc_queue_attributes);
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <main+0xa4>)
 800075e:	2104      	movs	r1, #4
 8000760:	2010      	movs	r0, #16
 8000762:	f001 ff9d 	bl	80026a0 <osMessageQueueNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <main+0xa8>)
 800076a:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800076c:	f001 fe06 	bl	800237c <osKernelStart>
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x70>
 8000772:	bf00      	nop
 8000774:	08005f70 	.word	0x08005f70
 8000778:	08000a95 	.word	0x08000a95
 800077c:	200000e0 	.word	0x200000e0
 8000780:	08005f80 	.word	0x08005f80
 8000784:	08000ab5 	.word	0x08000ab5
 8000788:	200000e4 	.word	0x200000e4
 800078c:	08005f28 	.word	0x08005f28
 8000790:	0800095d 	.word	0x0800095d
 8000794:	200000d8 	.word	0x200000d8
 8000798:	08005f4c 	.word	0x08005f4c
 800079c:	08000a3d 	.word	0x08000a3d
 80007a0:	200000dc 	.word	0x200000dc
 80007a4:	08005f90 	.word	0x08005f90
 80007a8:	200000e8 	.word	0x200000e8

080007ac <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 ff06 	bl	80055cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <SystemClock_Config+0xcc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a27      	ldr	r2, [pc, #156]	; (8000878 <SystemClock_Config+0xcc>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <SystemClock_Config+0xcc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <SystemClock_Config+0xd0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <SystemClock_Config+0xd0>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <SystemClock_Config+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800081c:	2308      	movs	r3, #8
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000820:	23c0      	movs	r3, #192	; 0xc0
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000824:	2304      	movs	r3, #4
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000828:	2308      	movs	r3, #8
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fcf1 	bl	8001218 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800083c:	f000 f94a 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2103      	movs	r1, #3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 ff52 	bl	8001708 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086a:	f000 f933 	bl	8000ad4 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART2_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008b8:	f001 f946 	bl	8001b48 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f907 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000090 	.word	0x20000090
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_GPIO_Init+0x80>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_GPIO_Init+0x80>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_GPIO_Init+0x80>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_GPIO_Init+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <MX_GPIO_Init+0x80>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_GPIO_Init+0x80>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x84>)
 800092a:	f000 fc41 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800092e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_GPIO_Init+0x84>)
 8000948:	f000 faae 	bl	8000ea8 <HAL_GPIO_Init>

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40020c00 	.word	0x40020c00

0800095c <Task1_function>:

void Task1_function(void *argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint8_t* msg1="Hello world\r\n";
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <Task1_function+0xbc>)
 8000966:	61bb      	str	r3, [r7, #24]
  osTimerStart(Timer1Handle,1000);//Goi timer 1 chay
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <Task1_function+0xc0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fe67 	bl	8002644 <osTimerStart>

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097a:	4829      	ldr	r0, [pc, #164]	; (8000a20 <Task1_function+0xc4>)
 800097c:	f000 fc31 	bl	80011e2 <HAL_GPIO_TogglePin>
    char msg2[12]={0};
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
    uint32_t msg_count=osMessageQueueGetCount(adc_queueHandle);//Get number of queued messages in a Message Queue
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <Task1_function+0xc8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f001 ffb6 	bl	8002904 <osMessageQueueGetCount>
 8000998:	6178      	str	r0, [r7, #20]
    sprintf(msg2,"adc value: %ld",adc_data);  //Read the first times
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <Task1_function+0xcc>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4922      	ldr	r1, [pc, #136]	; (8000a2c <Task1_function+0xd0>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 fe19 	bl	80055dc <siprintf>
    for(int i=1; i< msg_count ;i++)            //Read the second times
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
 80009ae:	e013      	b.n	80009d8 <Task1_function+0x7c>
    {
    	osMessageQueueGet(adc_queueHandle, &adc_data, 0,HAL_MAX_DELAY);
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <Task1_function+0xc8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	2200      	movs	r2, #0
 80009ba:	491b      	ldr	r1, [pc, #108]	; (8000a28 <Task1_function+0xcc>)
 80009bc:	f001 ff44 	bl	8002848 <osMessageQueueGet>
    	sprintf(msg2, "%s,%ld" ,msg2, adc_data);
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <Task1_function+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f107 0208 	add.w	r2, r7, #8
 80009c8:	f107 0008 	add.w	r0, r7, #8
 80009cc:	4918      	ldr	r1, [pc, #96]	; (8000a30 <Task1_function+0xd4>)
 80009ce:	f004 fe05 	bl	80055dc <siprintf>
    for(int i=1; i< msg_count ;i++)            //Read the second times
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8e7      	bhi.n	80009b0 <Task1_function+0x54>
    }

    sprintf(msg2,"%s\r\n",msg2);// luu du lieu adc vao vung nho format sprint gui qua Uart
 80009e0:	f107 0208 	add.w	r2, r7, #8
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4912      	ldr	r1, [pc, #72]	; (8000a34 <Task1_function+0xd8>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 fdf6 	bl	80055dc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg2, strlen(msg2),HAL_MAX_DELAY);//Use UART transmit adc_value to hercules
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbf3 	bl	80001e0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0108 	add.w	r1, r7, #8
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <Task1_function+0xdc>)
 8000a08:	f001 f8eb 	bl	8001be2 <HAL_UART_Transmit>
    osDelay(5000);
 8000a0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a10:	f001 fd6c 	bl	80024ec <osDelay>
  {
 8000a14:	e7af      	b.n	8000976 <Task1_function+0x1a>
 8000a16:	bf00      	nop
 8000a18:	08005ee0 	.word	0x08005ee0
 8000a1c:	200000e0 	.word	0x200000e0
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	200000d4 	.word	0x200000d4
 8000a2c:	08005ef0 	.word	0x08005ef0
 8000a30:	08005f00 	.word	0x08005f00
 8000a34:	08005f08 	.word	0x08005f08
 8000a38:	20000090 	.word	0x20000090

08000a3c <Task2_function>:

}

/* USER CODE END Header_Task2_function */
void Task2_function(void *argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  osTimerStart(Timer2Handle,2500);
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <Task2_function+0x48>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fdf9 	bl	8002644 <osTimerStart>
  for(;;)
  {
	  adc_start();
 8000a52:	f7ff fe27 	bl	80006a4 <adc_start>
	  adc_data=adc_read();
 8000a56:	f7ff fe39 	bl	80006cc <adc_read>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <Task2_function+0x4c>)
 8000a5e:	6013      	str	r3, [r2, #0]
	  osMessageQueuePut(adc_queueHandle, &adc_data, 0,HAL_MAX_DELAY); //put data in the Queue
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <Task2_function+0x50>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4907      	ldr	r1, [pc, #28]	; (8000a88 <Task2_function+0x4c>)
 8000a6c:	f001 fe8c 	bl	8002788 <osMessageQueuePut>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <Task2_function+0x54>)
 8000a76:	f000 fbb4 	bl	80011e2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7e:	f001 fd35 	bl	80024ec <osDelay>
	  adc_start();
 8000a82:	e7e6      	b.n	8000a52 <Task2_function+0x16>
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	200000d4 	.word	0x200000d4
 8000a8c:	200000e8 	.word	0x200000e8
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <Timer1_function>:

}

/* Timer1_function function */
void Timer1_function(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <Timer1_function+0x1c>)
 8000aa2:	f000 fb9e 	bl	80011e2 <HAL_GPIO_TogglePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020c00 	.word	0x40020c00

08000ab4 <Timer2_func>:

/* Timer2_func function */
void Timer2_func(void *argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <Timer2_func+0x1c>)
 8000ac2:	f000 fb8e 	bl	80011e2 <HAL_GPIO_TogglePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <Error_Handler>:

void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f000 f9a7 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f8ac 	bl	8000cfc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba4:	f003 fbb6 	bl	8004314 <xTaskGetSchedulerState>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d001      	beq.n	8000bb2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bae:	f004 fa5b 	bl	8005068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f004 fcb8 	bl	800555c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	200000ec 	.word	0x200000ec
 8000c20:	20004a58 	.word	0x20004a58

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd7 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f004 fc77 	bl	8005568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fd41 	bl	8000700 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c8c:	08006004 	.word	0x08006004
  ldr r2, =_sbss
 8000c90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c94:	20004a54 	.word	0x20004a54

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f8e8 	bl	8000e90 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f8be 	bl	8000e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000f0 	.word	0x200000f0

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200000f0 	.word	0x200000f0

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6a:	f7ff ff67 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ff99 	bl	8000dac <NVIC_EncodePriority>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff68 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ffbb 	bl	8000e14 <SysTick_Config>
 8000e9e:	4603      	mov	r3, r0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	e159      	b.n	8001178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 8148 	bne.w	8001172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d005      	beq.n	8000efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d130      	bne.n	8000f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d017      	beq.n	8000f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69b9      	ldr	r1, [r7, #24]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80a2 	beq.w	8001172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b57      	ldr	r3, [pc, #348]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a56      	ldr	r2, [pc, #344]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104a:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x2f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x202>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2f4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1fe>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_GPIO_Init+0x2f8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1fa>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1f6>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <HAL_GPIO_Init+0x300>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1f2>
 8001096:	2304      	movs	r3, #4
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x204>
 800109a:	2307      	movs	r3, #7
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x204>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010aa:	2300      	movs	r3, #0
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010bc:	4935      	ldr	r1, [pc, #212]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_GPIO_Init+0x304>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x304>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_GPIO_Init+0x304>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	f67f aea2 	bls.w	8000ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43d9      	mvns	r1, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	400b      	ands	r3, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e267      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d075      	beq.n	8001322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d00c      	beq.n	800125c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d112      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b82      	ldr	r3, [pc, #520]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800125a:	d10b      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4b7e      	ldr	r3, [pc, #504]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d05b      	beq.n	8001320 <HAL_RCC_OscConfig+0x108>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d157      	bne.n	8001320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e242      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x74>
 800127e:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a75      	ldr	r2, [pc, #468]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e01d      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6f      	ldr	r2, [pc, #444]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6c      	ldr	r2, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a68      	ldr	r2, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fd28 	bl	8000d24 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fd24 	bl	8000d24 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e207      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012f6:	e014      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fd14 	bl	8000d24 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fd10 	bl	8000d24 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1f3      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0xe8>
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d063      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d11c      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d116      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e1c7      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	e03a      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x244>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fcc9 	bl	8000d24 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fcc5 	bl	8000d24 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1a8      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4925      	ldr	r1, [pc, #148]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e015      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_RCC_OscConfig+0x244>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fca8 	bl	8000d24 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fca4 	bl	8000d24 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e187      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d036      	beq.n	8001470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d016      	beq.n	8001438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x248>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fc88 	bl	8000d24 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fc84 	bl	8000d24 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e167      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x240>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x200>
 8001436:	e01b      	b.n	8001470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x248>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc71 	bl	8000d24 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e00e      	b.n	8001464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fc6d 	bl	8000d24 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d907      	bls.n	8001464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e150      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
 8001458:	40023800 	.word	0x40023800
 800145c:	42470000 	.word	0x42470000
 8001460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	4b88      	ldr	r3, [pc, #544]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ea      	bne.n	8001446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 8097 	beq.w	80015ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b81      	ldr	r3, [pc, #516]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a7c      	ldr	r2, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b7a      	ldr	r3, [pc, #488]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a73      	ldr	r2, [pc, #460]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fc2d 	bl	8000d24 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fc29 	bl	8000d24 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e10c      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x474>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x2ea>
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a63      	ldr	r2, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	e01c      	b.n	800153c <HAL_RCC_OscConfig+0x324>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x30c>
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a5e      	ldr	r2, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a5b      	ldr	r2, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0x324>
 8001524:	4b58      	ldr	r3, [pc, #352]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a57      	ldr	r2, [pc, #348]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
 8001530:	4b55      	ldr	r3, [pc, #340]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d015      	beq.n	8001570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff fbee 	bl	8000d24 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff fbea 	bl	8000d24 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e0cb      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0ee      	beq.n	800154c <HAL_RCC_OscConfig+0x334>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fbd8 	bl	8000d24 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fbd4 	bl	8000d24 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0b5      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ee      	bne.n	8001578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a38      	ldr	r2, [pc, #224]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a1 	beq.w	80016f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d05c      	beq.n	800167c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d141      	bne.n	800164e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_RCC_OscConfig+0x478>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fba8 	bl	8000d24 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fba4 	bl	8000d24 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e087      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	3b01      	subs	r3, #1
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	491b      	ldr	r1, [pc, #108]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x478>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fb7d 	bl	8000d24 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fb79 	bl	8000d24 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e05c      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x416>
 800164c:	e054      	b.n	80016f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_RCC_OscConfig+0x478>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb66 	bl	8000d24 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff fb62 	bl	8000d24 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e045      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x470>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x444>
 800167a:	e03d      	b.n	80016f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e038      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000
 8001690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x4ec>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d028      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d121      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d11a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c4:	4013      	ands	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d111      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	3b01      	subs	r3, #1
 80016de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0cc      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d90c      	bls.n	8001744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800177e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d044      	beq.n	8001828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d119      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e067      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4934      	ldr	r1, [pc, #208]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fa94 	bl	8000d24 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fa90 	bl	8000d24 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e04f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20c      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f9f4 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08005fa8 	.word	0x08005fa8
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d8:	b094      	sub	sp, #80	; 0x50
 80018da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
 80018e0:	2300      	movs	r3, #0
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e4:	2300      	movs	r3, #0
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d00d      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x40>
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	f200 80e1 	bhi.w	8001ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x34>
 8001902:	2b04      	cmp	r3, #4
 8001904:	d003      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0x3a>
 8001906:	e0db      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800190c:	e0db      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800190e:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_RCC_GetSysClockFreq+0x208>)
 8001910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001912:	e0d8      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001914:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	2200      	movs	r2, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
 8001934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
 8001942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001946:	4622      	mov	r2, r4
 8001948:	462b      	mov	r3, r5
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0159      	lsls	r1, r3, #5
 8001954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001958:	0150      	lsls	r0, r2, #5
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4621      	mov	r1, r4
 8001960:	1a51      	subs	r1, r2, r1
 8001962:	6139      	str	r1, [r7, #16]
 8001964:	4629      	mov	r1, r5
 8001966:	eb63 0301 	sbc.w	r3, r3, r1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001978:	4659      	mov	r1, fp
 800197a:	018b      	lsls	r3, r1, #6
 800197c:	4651      	mov	r1, sl
 800197e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001982:	4651      	mov	r1, sl
 8001984:	018a      	lsls	r2, r1, #6
 8001986:	4651      	mov	r1, sl
 8001988:	ebb2 0801 	subs.w	r8, r2, r1
 800198c:	4659      	mov	r1, fp
 800198e:	eb63 0901 	sbc.w	r9, r3, r1
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800199e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019a6:	4690      	mov	r8, r2
 80019a8:	4699      	mov	r9, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	eb18 0303 	adds.w	r3, r8, r3
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	462b      	mov	r3, r5
 80019b4:	eb49 0303 	adc.w	r3, r9, r3
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019c6:	4629      	mov	r1, r5
 80019c8:	024b      	lsls	r3, r1, #9
 80019ca:	4621      	mov	r1, r4
 80019cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d0:	4621      	mov	r1, r4
 80019d2:	024a      	lsls	r2, r1, #9
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019da:	2200      	movs	r2, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e4:	f7fe fc54 	bl	8000290 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f0:	e058      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	2200      	movs	r2, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	4611      	mov	r1, r2
 80019fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a0c:	4642      	mov	r2, r8
 8001a0e:	464b      	mov	r3, r9
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	0159      	lsls	r1, r3, #5
 8001a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a1e:	0150      	lsls	r0, r2, #5
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4641      	mov	r1, r8
 8001a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a44:	ebb2 040a 	subs.w	r4, r2, sl
 8001a48:	eb63 050b 	sbc.w	r5, r3, fp
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	00eb      	lsls	r3, r5, #3
 8001a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	18e3      	adds	r3, r4, r3
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	464b      	mov	r3, r9
 8001a68:	eb45 0303 	adc.w	r3, r5, r3
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	028b      	lsls	r3, r1, #10
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a84:	4621      	mov	r1, r4
 8001a86:	028a      	lsls	r2, r1, #10
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	61fa      	str	r2, [r7, #28]
 8001a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a98:	f7fe fbfa 	bl	8000290 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3750      	adds	r7, #80	; 0x50
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	007a1200 	.word	0x007a1200

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a9b      	lsrs	r3, r3, #10
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08005fb8 	.word	0x08005fb8

08001b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b24:	f7ff ffdc 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0b5b      	lsrs	r3, r3, #13
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08005fb8 	.word	0x08005fb8

08001b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e03f      	b.n	8001bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe ffb6 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f929 	bl	8001de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b08a      	sub	sp, #40	; 0x28
 8001be6:	af02      	add	r7, sp, #8
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d17c      	bne.n	8001cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_UART_Transmit+0x2c>
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e075      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_UART_Transmit+0x3e>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e06e      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2221      	movs	r2, #33	; 0x21
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c36:	f7ff f875 	bl	8000d24 <HAL_GetTick>
 8001c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c50:	d108      	bne.n	8001c64 <HAL_UART_Transmit+0x82>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d104      	bne.n	8001c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	e003      	b.n	8001c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c74:	e02a      	b.n	8001ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f840 	bl	8001d06 <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e036      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3302      	adds	r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	e007      	b.n	8001cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1cf      	bne.n	8001c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2140      	movs	r1, #64	; 0x40
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f810 	bl	8001d06 <UART_WaitOnFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e006      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b090      	sub	sp, #64	; 0x40
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d16:	e050      	b.n	8001dba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d04c      	beq.n	8001dba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d26:	f7fe fffd 	bl	8000d24 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d241      	bcs.n	8001dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	e853 3f00 	ldrex	r3, [r3]
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	330c      	adds	r3, #12
 8001d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d56:	637a      	str	r2, [r7, #52]	; 0x34
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5e:	e841 2300 	strex	r3, r2, [r1]
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e5      	bne.n	8001d36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3314      	adds	r3, #20
 8001d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	e853 3f00 	ldrex	r3, [r3]
 8001d78:	613b      	str	r3, [r7, #16]
   return(result);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3314      	adds	r3, #20
 8001d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d8a:	623a      	str	r2, [r7, #32]
 8001d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8e:	69f9      	ldr	r1, [r7, #28]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	e841 2300 	strex	r3, r2, [r1]
 8001d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e5      	bne.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00f      	b.n	8001dda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d09f      	beq.n	8001d18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3740      	adds	r7, #64	; 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b0c0      	sub	sp, #256	; 0x100
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	ea40 0301 	orr.w	r3, r0, r1
 8001e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e3c:	f021 010c 	bic.w	r1, r1, #12
 8001e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5e:	6999      	ldr	r1, [r3, #24]
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	ea40 0301 	orr.w	r3, r0, r1
 8001e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <UART_SetConfig+0x2cc>)
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d005      	beq.n	8001e84 <UART_SetConfig+0xa0>
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	; (80020b4 <UART_SetConfig+0x2d0>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d104      	bne.n	8001e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e84:	f7ff fe4c 	bl	8001b20 <HAL_RCC_GetPCLK2Freq>
 8001e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e8c:	e003      	b.n	8001e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e8e:	f7ff fe33 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8001e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea0:	f040 810c 	bne.w	80020bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	1891      	adds	r1, r2, r2
 8001ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ebe:	415b      	adcs	r3, r3
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	eb12 0801 	adds.w	r8, r2, r1
 8001ecc:	4629      	mov	r1, r5
 8001ece:	eb43 0901 	adc.w	r9, r3, r1
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee6:	4690      	mov	r8, r2
 8001ee8:	4699      	mov	r9, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	eb18 0303 	adds.w	r3, r8, r3
 8001ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	eb49 0303 	adc.w	r3, r9, r3
 8001efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f12:	460b      	mov	r3, r1
 8001f14:	18db      	adds	r3, r3, r3
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
 8001f18:	4613      	mov	r3, r2
 8001f1a:	eb42 0303 	adc.w	r3, r2, r3
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f28:	f7fe f9b2 	bl	8000290 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001f32:	fba3 2302 	umull	r2, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	011c      	lsls	r4, r3, #4
 8001f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	464b      	mov	r3, r9
 8001f50:	1891      	adds	r1, r2, r2
 8001f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f54:	415b      	adcs	r3, r3
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8001f62:	4649      	mov	r1, r9
 8001f64:	eb43 0b01 	adc.w	fp, r3, r1
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	469b      	mov	fp, r3
 8001f80:	4643      	mov	r3, r8
 8001f82:	eb1a 0303 	adds.w	r3, sl, r3
 8001f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	18db      	adds	r3, r3, r3
 8001fac:	643b      	str	r3, [r7, #64]	; 0x40
 8001fae:	4613      	mov	r3, r2
 8001fb0:	eb42 0303 	adc.w	r3, r2, r3
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fbe:	f7fe f967 	bl	8000290 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fca:	fba3 2301 	umull	r2, r3, r3, r1
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2264      	movs	r2, #100	; 0x64
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	1acb      	subs	r3, r1, r3
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fec:	441c      	add	r4, r3
 8001fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002000:	4642      	mov	r2, r8
 8002002:	464b      	mov	r3, r9
 8002004:	1891      	adds	r1, r2, r2
 8002006:	63b9      	str	r1, [r7, #56]	; 0x38
 8002008:	415b      	adcs	r3, r3
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800200c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002010:	4641      	mov	r1, r8
 8002012:	1851      	adds	r1, r2, r1
 8002014:	6339      	str	r1, [r7, #48]	; 0x30
 8002016:	4649      	mov	r1, r9
 8002018:	414b      	adcs	r3, r1
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002028:	4659      	mov	r1, fp
 800202a:	00cb      	lsls	r3, r1, #3
 800202c:	4651      	mov	r1, sl
 800202e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002032:	4651      	mov	r1, sl
 8002034:	00ca      	lsls	r2, r1, #3
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	4603      	mov	r3, r0
 800203c:	4642      	mov	r2, r8
 800203e:	189b      	adds	r3, r3, r2
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002044:	464b      	mov	r3, r9
 8002046:	460a      	mov	r2, r1
 8002048:	eb42 0303 	adc.w	r3, r2, r3
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800205c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002064:	460b      	mov	r3, r1
 8002066:	18db      	adds	r3, r3, r3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	4613      	mov	r3, r2
 800206c:	eb42 0303 	adc.w	r3, r2, r3
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800207a:	f7fe f909 	bl	8000290 <__aeabi_uldivmod>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002084:	fba3 1302 	umull	r1, r3, r3, r2
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	2164      	movs	r1, #100	; 0x64
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	3332      	adds	r3, #50	; 0x32
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	f003 0207 	and.w	r2, r3, #7
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4422      	add	r2, r4
 80020aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020ac:	e105      	b.n	80022ba <UART_SetConfig+0x4d6>
 80020ae:	bf00      	nop
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020ce:	4642      	mov	r2, r8
 80020d0:	464b      	mov	r3, r9
 80020d2:	1891      	adds	r1, r2, r2
 80020d4:	6239      	str	r1, [r7, #32]
 80020d6:	415b      	adcs	r3, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020de:	4641      	mov	r1, r8
 80020e0:	1854      	adds	r4, r2, r1
 80020e2:	4649      	mov	r1, r9
 80020e4:	eb43 0501 	adc.w	r5, r3, r1
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	00eb      	lsls	r3, r5, #3
 80020f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f6:	00e2      	lsls	r2, r4, #3
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	18e3      	adds	r3, r4, r3
 8002100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002104:	464b      	mov	r3, r9
 8002106:	eb45 0303 	adc.w	r3, r5, r3
 800210a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800211a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800212a:	4629      	mov	r1, r5
 800212c:	008b      	lsls	r3, r1, #2
 800212e:	4621      	mov	r1, r4
 8002130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002134:	4621      	mov	r1, r4
 8002136:	008a      	lsls	r2, r1, #2
 8002138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800213c:	f7fe f8a8 	bl	8000290 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <UART_SetConfig+0x4e4>)
 8002146:	fba3 2302 	umull	r2, r3, r3, r2
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	011c      	lsls	r4, r3, #4
 800214e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800215c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	1891      	adds	r1, r2, r2
 8002166:	61b9      	str	r1, [r7, #24]
 8002168:	415b      	adcs	r3, r3
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002170:	4641      	mov	r1, r8
 8002172:	1851      	adds	r1, r2, r1
 8002174:	6139      	str	r1, [r7, #16]
 8002176:	4649      	mov	r1, r9
 8002178:	414b      	adcs	r3, r1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002188:	4659      	mov	r1, fp
 800218a:	00cb      	lsls	r3, r1, #3
 800218c:	4651      	mov	r1, sl
 800218e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002192:	4651      	mov	r1, sl
 8002194:	00ca      	lsls	r2, r1, #3
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4603      	mov	r3, r0
 800219c:	4642      	mov	r2, r8
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a4:	464b      	mov	r3, r9
 80021a6:	460a      	mov	r2, r1
 80021a8:	eb42 0303 	adc.w	r3, r2, r3
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021c8:	4649      	mov	r1, r9
 80021ca:	008b      	lsls	r3, r1, #2
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d2:	4641      	mov	r1, r8
 80021d4:	008a      	lsls	r2, r1, #2
 80021d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021da:	f7fe f859 	bl	8000290 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <UART_SetConfig+0x4e4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <UART_SetConfig+0x4e4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002202:	441c      	add	r4, r3
 8002204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002208:	2200      	movs	r2, #0
 800220a:	673b      	str	r3, [r7, #112]	; 0x70
 800220c:	677a      	str	r2, [r7, #116]	; 0x74
 800220e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002212:	4642      	mov	r2, r8
 8002214:	464b      	mov	r3, r9
 8002216:	1891      	adds	r1, r2, r2
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	415b      	adcs	r3, r3
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002222:	4641      	mov	r1, r8
 8002224:	1851      	adds	r1, r2, r1
 8002226:	6039      	str	r1, [r7, #0]
 8002228:	4649      	mov	r1, r9
 800222a:	414b      	adcs	r3, r1
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800223a:	4659      	mov	r1, fp
 800223c:	00cb      	lsls	r3, r1, #3
 800223e:	4651      	mov	r1, sl
 8002240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002244:	4651      	mov	r1, sl
 8002246:	00ca      	lsls	r2, r1, #3
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	4603      	mov	r3, r0
 800224e:	4642      	mov	r2, r8
 8002250:	189b      	adds	r3, r3, r2
 8002252:	66bb      	str	r3, [r7, #104]	; 0x68
 8002254:	464b      	mov	r3, r9
 8002256:	460a      	mov	r2, r1
 8002258:	eb42 0303 	adc.w	r3, r2, r3
 800225c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	667a      	str	r2, [r7, #100]	; 0x64
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002276:	4649      	mov	r1, r9
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	4641      	mov	r1, r8
 800227c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002280:	4641      	mov	r1, r8
 8002282:	008a      	lsls	r2, r1, #2
 8002284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002288:	f7fe f802 	bl	8000290 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <UART_SetConfig+0x4e4>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2164      	movs	r1, #100	; 0x64
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <UART_SetConfig+0x4e4>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4422      	add	r2, r4
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <__NVIC_SetPriority>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002324:	2100      	movs	r1, #0
 8002326:	f06f 0004 	mvn.w	r0, #4
 800232a:	f7ff ffcf 	bl	80022cc <__NVIC_SetPriority>
#endif
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233a:	f3ef 8305 	mrs	r3, IPSR
 800233e:	603b      	str	r3, [r7, #0]
  return(result);
 8002340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002346:	f06f 0305 	mvn.w	r3, #5
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	e00c      	b.n	8002368 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <osKernelInitialize+0x44>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <osKernelInitialize+0x44>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	e002      	b.n	8002368 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200000f4 	.word	0x200000f4

0800237c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002382:	f3ef 8305 	mrs	r3, IPSR
 8002386:	603b      	str	r3, [r7, #0]
  return(result);
 8002388:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <osKernelStart+0x1a>
    stat = osErrorISR;
 800238e:	f06f 0305 	mvn.w	r3, #5
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	e010      	b.n	80023b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <osKernelStart+0x48>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d109      	bne.n	80023b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800239e:	f7ff ffbf 	bl	8002320 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <osKernelStart+0x48>)
 80023a4:	2202      	movs	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023a8:	f001 fb6c 	bl	8003a84 <vTaskStartScheduler>
      stat = osOK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	e002      	b.n	80023b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200000f4 	.word	0x200000f4

080023c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08e      	sub	sp, #56	; 0x38
 80023cc:	af04      	add	r7, sp, #16
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023d8:	f3ef 8305 	mrs	r3, IPSR
 80023dc:	617b      	str	r3, [r7, #20]
  return(result);
 80023de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d17e      	bne.n	80024e2 <osThreadNew+0x11a>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d07b      	beq.n	80024e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023ee:	2318      	movs	r3, #24
 80023f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d045      	beq.n	800248e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <osThreadNew+0x48>
        name = attr->name;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <osThreadNew+0x6e>
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b38      	cmp	r3, #56	; 0x38
 8002428:	d805      	bhi.n	8002436 <osThreadNew+0x6e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <osThreadNew+0x72>
        return (NULL);
 8002436:	2300      	movs	r3, #0
 8002438:	e054      	b.n	80024e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00e      	beq.n	8002470 <osThreadNew+0xa8>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b5b      	cmp	r3, #91	; 0x5b
 8002458:	d90a      	bls.n	8002470 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <osThreadNew+0xa8>
        mem = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e010      	b.n	8002492 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10c      	bne.n	8002492 <osThreadNew+0xca>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <osThreadNew+0xca>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <osThreadNew+0xca>
          mem = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e001      	b.n	8002492 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d110      	bne.n	80024ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024a0:	9202      	str	r2, [sp, #8]
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6a3a      	ldr	r2, [r7, #32]
 80024ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f001 f912 	bl	80036d8 <xTaskCreateStatic>
 80024b4:	4603      	mov	r3, r0
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e013      	b.n	80024e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d110      	bne.n	80024e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f001 f95d 	bl	8003792 <xTaskCreate>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <osThreadNew+0x11a>
            hTask = NULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024e2:	693b      	ldr	r3, [r7, #16]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f4:	f3ef 8305 	mrs	r3, IPSR
 80024f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80024fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <osDelay+0x1c>
    stat = osErrorISR;
 8002500:	f06f 0305 	mvn.w	r3, #5
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e007      	b.n	8002518 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f001 fa82 	bl	8003a1c <vTaskDelay>
    }
  }

  return (stat);
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f002 fbba 	bl	8004ca4 <pvTimerGetTimerID>
 8002530:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	6852      	ldr	r2, [r2, #4]
 8002540:	4610      	mov	r0, r2
 8002542:	4798      	blx	r3
  }
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	460b      	mov	r3, r1
 800255a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002560:	f3ef 8305 	mrs	r3, IPSR
 8002564:	613b      	str	r3, [r7, #16]
  return(result);
 8002566:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002568:	2b00      	cmp	r3, #0
 800256a:	d163      	bne.n	8002634 <osTimerNew+0xe8>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d060      	beq.n	8002634 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002572:	2008      	movs	r0, #8
 8002574:	f002 fe08 	bl	8005188 <pvPortMalloc>
 8002578:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d059      	beq.n	8002634 <osTimerNew+0xe8>
      callb->func = func;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <osTimerNew+0x4c>
        reload = pdFALSE;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e001      	b.n	800259c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002598:	2301      	movs	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01c      	beq.n	80025e6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <osTimerNew+0x6e>
          name = attr->name;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <osTimerNew+0x84>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b2b      	cmp	r3, #43	; 0x2b
 80025c8:	d902      	bls.n	80025d0 <osTimerNew+0x84>
          mem = 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e00c      	b.n	80025ea <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d108      	bne.n	80025ea <osTimerNew+0x9e>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <osTimerNew+0x9e>
            mem = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e001      	b.n	80025ea <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d10c      	bne.n	800260a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <osTimerNew+0xf4>)
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	2101      	movs	r1, #1
 8002600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002602:	f001 ffd0 	bl	80045a6 <xTimerCreateStatic>
 8002606:	6238      	str	r0, [r7, #32]
 8002608:	e00b      	b.n	8002622 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d108      	bne.n	8002622 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <osTimerNew+0xf4>)
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	2101      	movs	r1, #1
 800261a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800261c:	f001 ffa2 	bl	8004564 <xTimerCreate>
 8002620:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <osTimerNew+0xe8>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <osTimerNew+0xe8>
        vPortFree (callb);
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f002 fe76 	bl	8005320 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002634:	6a3b      	ldr	r3, [r7, #32]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	08002523 	.word	0x08002523

08002644 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002652:	f3ef 8305 	mrs	r3, IPSR
 8002656:	60fb      	str	r3, [r7, #12]
  return(result);
 8002658:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <osTimerStart+0x22>
    stat = osErrorISR;
 800265e:	f06f 0305 	mvn.w	r3, #5
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e017      	b.n	8002696 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <osTimerStart+0x30>
    stat = osErrorParameter;
 800266c:	f06f 0303 	mvn.w	r3, #3
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e010      	b.n	8002696 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2300      	movs	r3, #0
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	2104      	movs	r1, #4
 800267e:	6938      	ldr	r0, [r7, #16]
 8002680:	f002 f80a 	bl	8004698 <xTimerGenericCommand>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <osTimerStart+0x4c>
      stat = osOK;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e002      	b.n	8002696 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002690:	f06f 0302 	mvn.w	r3, #2
 8002694:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002696:	697b      	ldr	r3, [r7, #20]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026b0:	f3ef 8305 	mrs	r3, IPSR
 80026b4:	613b      	str	r3, [r7, #16]
  return(result);
 80026b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d15f      	bne.n	800277c <osMessageQueueNew+0xdc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d05c      	beq.n	800277c <osMessageQueueNew+0xdc>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d059      	beq.n	800277c <osMessageQueueNew+0xdc>
    mem = -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d029      	beq.n	8002728 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <osMessageQueueNew+0x62>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b4f      	cmp	r3, #79	; 0x4f
 80026e2:	d90e      	bls.n	8002702 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d302      	bcc.n	8002702 <osMessageQueueNew+0x62>
        mem = 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e014      	b.n	800272c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d110      	bne.n	800272c <osMessageQueueNew+0x8c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <osMessageQueueNew+0x8c>
          mem = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e001      	b.n	800272c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10b      	bne.n	800274a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2100      	movs	r1, #0
 800273c:	9100      	str	r1, [sp, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa4f 	bl	8002be4 <xQueueGenericCreateStatic>
 8002746:	61f8      	str	r0, [r7, #28]
 8002748:	e008      	b.n	800275c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002750:	2200      	movs	r2, #0
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fabd 	bl	8002cd4 <xQueueGenericCreate>
 800275a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e001      	b.n	8002774 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	69f8      	ldr	r0, [r7, #28]
 8002778:	f000 ff50 	bl	800361c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800277c:	69fb      	ldr	r3, [r7, #28]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a0:	f3ef 8305 	mrs	r3, IPSR
 80027a4:	617b      	str	r3, [r7, #20]
  return(result);
 80027a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d028      	beq.n	80027fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <osMessageQueuePut+0x36>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <osMessageQueuePut+0x36>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80027be:	f06f 0303 	mvn.w	r3, #3
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	e038      	b.n	8002838 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80027ca:	f107 0210 	add.w	r2, r7, #16
 80027ce:	2300      	movs	r3, #0
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	69b8      	ldr	r0, [r7, #24]
 80027d4:	f000 fbda 	bl	8002f8c <xQueueGenericSendFromISR>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d003      	beq.n	80027e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80027de:	f06f 0302 	mvn.w	r3, #2
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	e028      	b.n	8002838 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d025      	beq.n	8002838 <osMessageQueuePut+0xb0>
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <osMessageQueuePut+0xbc>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	e01c      	b.n	8002838 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <osMessageQueuePut+0x82>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800280a:	f06f 0303 	mvn.w	r3, #3
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e012      	b.n	8002838 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002812:	2300      	movs	r3, #0
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	69b8      	ldr	r0, [r7, #24]
 800281a:	f000 fab9 	bl	8002d90 <xQueueGenericSend>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d009      	beq.n	8002838 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800282a:	f06f 0301 	mvn.w	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	e002      	b.n	8002838 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002832:	f06f 0302 	mvn.w	r3, #2
 8002836:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002838:	69fb      	ldr	r3, [r7, #28]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800285e:	f3ef 8305 	mrs	r3, IPSR
 8002862:	617b      	str	r3, [r7, #20]
  return(result);
 8002864:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <osMessageQueueGet+0x34>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <osMessageQueueGet+0x34>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800287c:	f06f 0303 	mvn.w	r3, #3
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e037      	b.n	80028f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	461a      	mov	r2, r3
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	69b8      	ldr	r0, [r7, #24]
 8002892:	f000 fcf7 	bl	8003284 <xQueueReceiveFromISR>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d003      	beq.n	80028a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800289c:	f06f 0302 	mvn.w	r3, #2
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e027      	b.n	80028f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d024      	beq.n	80028f4 <osMessageQueueGet+0xac>
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <osMessageQueueGet+0xb8>)
 80028ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	e01b      	b.n	80028f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <osMessageQueueGet+0x80>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80028c8:	f06f 0303 	mvn.w	r3, #3
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e011      	b.n	80028f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	69b8      	ldr	r0, [r7, #24]
 80028d6:	f000 fbf5 	bl	80030c4 <xQueueReceive>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d009      	beq.n	80028f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80028e6:	f06f 0301 	mvn.w	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	e002      	b.n	80028f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80028ee:	f06f 0302 	mvn.w	r3, #2
 80028f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80028f4:	69fb      	ldr	r3, [r7, #28]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <osMessageQueueGetCount+0x18>
    count = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e00e      	b.n	800293a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800291c:	f3ef 8305 	mrs	r3, IPSR
 8002920:	60fb      	str	r3, [r7, #12]
  return(result);
 8002922:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002928:	6938      	ldr	r0, [r7, #16]
 800292a:	f000 fd49 	bl	80033c0 <uxQueueMessagesWaitingFromISR>
 800292e:	6178      	str	r0, [r7, #20]
 8002930:	e003      	b.n	800293a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002932:	6938      	ldr	r0, [r7, #16]
 8002934:	f000 fd26 	bl	8003384 <uxQueueMessagesWaiting>
 8002938:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800293a:	697b      	ldr	r3, [r7, #20]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <vApplicationGetIdleTaskMemory+0x2c>)
 8002954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <vApplicationGetIdleTaskMemory+0x30>)
 800295a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	200000f8 	.word	0x200000f8
 8002974:	20000154 	.word	0x20000154

08002978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <vApplicationGetTimerTaskMemory+0x30>)
 800298e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002996:	601a      	str	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	20000354 	.word	0x20000354
 80029a8:	200003b0 	.word	0x200003b0

080029ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0208 	add.w	r2, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0208 	add.w	r2, r3, #8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f103 0208 	add.w	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d103      	bne.n	8002a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e00c      	b.n	8002a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3308      	adds	r3, #8
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e002      	b.n	8002a7c <vListInsert+0x2e>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d2f6      	bcs.n	8002a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6892      	ldr	r2, [r2, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6852      	ldr	r2, [r2, #4]
 8002ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d103      	bne.n	8002af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b3e:	f002 fa01 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	441a      	add	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	441a      	add	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d114      	bne.n	8002bbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01a      	beq.n	8002bd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3310      	adds	r3, #16
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f9f9 	bl	8003f98 <xTaskRemoveFromEventList>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <xQueueGenericReset+0xcc>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	e009      	b.n	8002bd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3310      	adds	r3, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fef2 	bl	80029ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3324      	adds	r3, #36	; 0x24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff feed 	bl	80029ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bd2:	f002 f9e7 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	; 0x38
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <xQueueGenericCreateStatic+0x52>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <xQueueGenericCreateStatic+0x56>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueGenericCreateStatic+0x58>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	623b      	str	r3, [r7, #32]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <xQueueGenericCreateStatic+0x7e>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <xQueueGenericCreateStatic+0x82>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <xQueueGenericCreateStatic+0x84>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	61fb      	str	r3, [r7, #28]
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c82:	2350      	movs	r3, #80	; 0x50
 8002c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d00a      	beq.n	8002ca2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61bb      	str	r3, [r7, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ca2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f83f 	bl	8002d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3730      	adds	r7, #48	; 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	613b      	str	r3, [r7, #16]
}
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3350      	adds	r3, #80	; 0x50
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fa3b 	bl	8005188 <pvPortMalloc>
 8002d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d011      	beq.n	8002d3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3350      	adds	r3, #80	; 0x50
 8002d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d2c:	79fa      	ldrb	r2, [r7, #7]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f805 	bl	8002d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e002      	b.n	8002d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d76:	2101      	movs	r1, #1
 8002d78:	69b8      	ldr	r0, [r7, #24]
 8002d7a:	f7ff fecb 	bl	8002b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericSend+0x32>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGenericSend+0x40>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGenericSend+0x44>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGenericSend+0x46>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <xQueueGenericSend+0x60>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d103      	bne.n	8002dfe <xQueueGenericSend+0x6e>
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <xQueueGenericSend+0x72>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueGenericSend+0x74>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueGenericSend+0x8e>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	623b      	str	r3, [r7, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e1e:	f001 fa79 	bl	8004314 <xTaskGetSchedulerState>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <xQueueGenericSend+0x9e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <xQueueGenericSend+0xa2>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueGenericSend+0xa4>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSend+0xbe>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61fb      	str	r3, [r7, #28]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e4e:	f002 f879 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <xQueueGenericSend+0xd4>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d129      	bne.n	8002eb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e6a:	f000 fac7 	bl	80033fc <prvCopyDataToQueue>
 8002e6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f88b 	bl	8003f98 <xTaskRemoveFromEventList>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	e00a      	b.n	8002eb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ea0:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eb0:	f002 f878 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e063      	b.n	8002f80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ebe:	f002 f871 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e05c      	b.n	8002f80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 f8c5 	bl	8004060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eda:	f002 f863 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ede:	f000 fe37 	bl	8003b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ee2:	f002 f82f 	bl	8004f44 <vPortEnterCritical>
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d103      	bne.n	8002efc <xQueueGenericSend+0x16c>
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d103      	bne.n	8002f12 <xQueueGenericSend+0x182>
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f12:	f002 f847 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f16:	1d3a      	adds	r2, r7, #4
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 f8b4 	bl	800408c <xTaskCheckForTimeOut>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d124      	bne.n	8002f74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2c:	f000 fb5e 	bl	80035ec <prvIsQueueFull>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d018      	beq.n	8002f68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	3310      	adds	r3, #16
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 ffda 	bl	8003ef8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f46:	f000 fae9 	bl	800351c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f4a:	f000 fe0f 	bl	8003b6c <xTaskResumeAll>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af7c 	bne.w	8002e4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	e772      	b.n	8002e4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6a:	f000 fad7 	bl	800351c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f6e:	f000 fdfd 	bl	8003b6c <xTaskResumeAll>
 8002f72:	e76c      	b.n	8002e4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f76:	f000 fad1 	bl	800351c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f7a:	f000 fdf7 	bl	8003b6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3738      	adds	r7, #56	; 0x38
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b090      	sub	sp, #64	; 0x40
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <xQueueGenericSendFromISR+0x3c>
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <xQueueGenericSendFromISR+0x40>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <xQueueGenericSendFromISR+0x42>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d103      	bne.n	8002ff6 <xQueueGenericSendFromISR+0x6a>
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSendFromISR+0x6e>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueGenericSendFromISR+0x70>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	623b      	str	r3, [r7, #32]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003016:	f002 f877 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800301a:	f3ef 8211 	mrs	r2, BASEPRI
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003032:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <xQueueGenericSendFromISR+0xbc>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d12f      	bne.n	80030a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800305e:	f000 f9cd 	bl	80033fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003062:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d112      	bne.n	8003092 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f000 ff8d 	bl	8003f98 <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e007      	b.n	80030a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003096:	3301      	adds	r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b25a      	sxtb	r2, r3
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030a2:	2301      	movs	r3, #1
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80030a6:	e001      	b.n	80030ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3740      	adds	r7, #64	; 0x40
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <xQueueReceive+0x30>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	623b      	str	r3, [r7, #32]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <xQueueReceive+0x3e>
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <xQueueReceive+0x42>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <xQueueReceive+0x44>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <xQueueReceive+0x5e>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	61fb      	str	r3, [r7, #28]
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003122:	f001 f8f7 	bl	8004314 <xTaskGetSchedulerState>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <xQueueReceive+0x6e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <xQueueReceive+0x72>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueReceive+0x74>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueReceive+0x8e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003152:	f001 fef7 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01f      	beq.n	80031a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003166:	f000 f9b3 	bl	80034d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1e5a      	subs	r2, r3, #1
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00f      	beq.n	800319a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	3310      	adds	r3, #16
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff0a 	bl	8003f98 <xTaskRemoveFromEventList>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <xQueueReceive+0x1bc>)
 800318c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800319a:	f001 ff03 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 800319e:	2301      	movs	r3, #1
 80031a0:	e069      	b.n	8003276 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031a8:	f001 fefc 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e062      	b.n	8003276 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 ff50 	bl	8004060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031c4:	f001 feee 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031c8:	f000 fcc2 	bl	8003b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031cc:	f001 feba 	bl	8004f44 <vPortEnterCritical>
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d103      	bne.n	80031e6 <xQueueReceive+0x122>
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d103      	bne.n	80031fc <xQueueReceive+0x138>
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fc:	f001 fed2 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003200:	1d3a      	adds	r2, r7, #4
 8003202:	f107 0310 	add.w	r3, r7, #16
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ff3f 	bl	800408c <xTaskCheckForTimeOut>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d123      	bne.n	800325c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003216:	f000 f9d3 	bl	80035c0 <prvIsQueueEmpty>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fe65 	bl	8003ef8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800322e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003230:	f000 f974 	bl	800351c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003234:	f000 fc9a 	bl	8003b6c <xTaskResumeAll>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d189      	bne.n	8003152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <xQueueReceive+0x1bc>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	e780      	b.n	8003152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003252:	f000 f963 	bl	800351c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003256:	f000 fc89 	bl	8003b6c <xTaskResumeAll>
 800325a:	e77a      	b.n	8003152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800325c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800325e:	f000 f95d 	bl	800351c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003262:	f000 fc83 	bl	8003b6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003268:	f000 f9aa 	bl	80035c0 <prvIsQueueEmpty>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	f43f af6f 	beq.w	8003152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003276:	4618      	mov	r0, r3
 8003278:	3730      	adds	r7, #48	; 0x30
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08e      	sub	sp, #56	; 0x38
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	623b      	str	r3, [r7, #32]
}
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <xQueueReceiveFromISR+0x3a>
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <xQueueReceiveFromISR+0x3e>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueReceiveFromISR+0x40>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	61fb      	str	r3, [r7, #28]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032de:	f001 ff13 	bl	8005108 <vPortValidateInterruptPriority>
	__asm volatile
 80032e2:	f3ef 8211 	mrs	r2, BASEPRI
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	61ba      	str	r2, [r7, #24]
 80032f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80032fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02f      	beq.n	800336a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003318:	f000 f8da 	bl	80034d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003324:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d112      	bne.n	8003354 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	3310      	adds	r3, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fe2c 	bl	8003f98 <xTaskRemoveFromEventList>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00e      	beq.n	8003364 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e007      	b.n	8003364 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003358:	3301      	adds	r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	b25a      	sxtb	r2, r3
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003364:	2301      	movs	r3, #1
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
 8003368:	e001      	b.n	800336e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800336a:	2300      	movs	r3, #0
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f383 8811 	msr	BASEPRI, r3
}
 8003378:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800337c:	4618      	mov	r0, r3
 800337e:	3738      	adds	r7, #56	; 0x38
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	60bb      	str	r3, [r7, #8]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80033a8:	f001 fdcc 	bl	8004f44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80033b2:	f001 fdf7 	bl	8004fa4 <vPortExitCritical>

	return uxReturn;
 80033b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	60fb      	str	r3, [r7, #12]
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80033ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80033f0:	4618      	mov	r0, r3
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d14d      	bne.n	80034be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 ff92 	bl	8004350 <xTaskPriorityDisinherit>
 800342c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e043      	b.n	80034be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d119      	bne.n	8003470 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6858      	ldr	r0, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	461a      	mov	r2, r3
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	f002 f8b2 	bl	80055b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	441a      	add	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d32b      	bcc.n	80034be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	e026      	b.n	80034be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68d8      	ldr	r0, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	461a      	mov	r2, r3
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	f002 f898 	bl	80055b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	425b      	negs	r3, r3
 800348a:	441a      	add	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	425b      	negs	r3, r3
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d105      	bne.n	80034be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034c6:	697b      	ldr	r3, [r7, #20]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d303      	bcc.n	8003504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	461a      	mov	r2, r3
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	f002 f84e 	bl	80055b0 <memcpy>
	}
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003524:	f001 fd0e 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800352e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003530:	e011      	b.n	8003556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3324      	adds	r3, #36	; 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fd2a 	bl	8003f98 <xTaskRemoveFromEventList>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800354a:	f000 fe01 	bl	8004150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	3b01      	subs	r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dce9      	bgt.n	8003532 <prvUnlockQueue+0x16>
 800355e:	e000      	b.n	8003562 <prvUnlockQueue+0x46>
					break;
 8003560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	22ff      	movs	r2, #255	; 0xff
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800356a:	f001 fd1b 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800356e:	f001 fce9 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800357a:	e011      	b.n	80035a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3310      	adds	r3, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fd05 	bl	8003f98 <xTaskRemoveFromEventList>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003594:	f000 fddc 	bl	8004150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003598:	7bbb      	ldrb	r3, [r7, #14]
 800359a:	3b01      	subs	r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	dce9      	bgt.n	800357c <prvUnlockQueue+0x60>
 80035a8:	e000      	b.n	80035ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	22ff      	movs	r2, #255	; 0xff
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035b4:	f001 fcf6 	bl	8004fa4 <vPortExitCritical>
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035c8:	f001 fcbc 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e001      	b.n	80035de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035de:	f001 fce1 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f4:	f001 fca6 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	429a      	cmp	r2, r3
 8003602:	d102      	bne.n	800360a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e001      	b.n	800360e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800360e:	f001 fcc9 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e014      	b.n	8003656 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800362c:	4a0f      	ldr	r2, [pc, #60]	; (800366c <vQueueAddToRegistry+0x50>)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <vQueueAddToRegistry+0x50>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <vQueueAddToRegistry+0x50>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800364e:	e006      	b.n	800365e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3301      	adds	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b07      	cmp	r3, #7
 800365a:	d9e7      	bls.n	800362c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200007b0 	.word	0x200007b0

08003670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003680:	f001 fc60 	bl	8004f44 <vPortEnterCritical>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368a:	b25b      	sxtb	r3, r3
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d103      	bne.n	800369a <vQueueWaitForMessageRestricted+0x2a>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <vQueueWaitForMessageRestricted+0x40>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b0:	f001 fc78 	bl	8004fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3324      	adds	r3, #36	; 0x24
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fc3b 	bl	8003f40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff26 	bl	800351c <prvUnlockQueue>
	}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af04      	add	r7, sp, #16
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	623b      	str	r3, [r7, #32]
}
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <xTaskCreateStatic+0x46>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	61fb      	str	r3, [r7, #28]
}
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800371e:	235c      	movs	r3, #92	; 0x5c
 8003720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b5c      	cmp	r3, #92	; 0x5c
 8003726:	d00a      	beq.n	800373e <xTaskCreateStatic+0x66>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61bb      	str	r3, [r7, #24]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800373e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01e      	beq.n	8003784 <xTaskCreateStatic+0xac>
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003754:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800375e:	2300      	movs	r3, #0
 8003760:	9303      	str	r3, [sp, #12]
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9302      	str	r3, [sp, #8]
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f850 	bl	800381c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800377c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800377e:	f000 f8dd 	bl	800393c <prvAddNewTaskToReadyList>
 8003782:	e001      	b.n	8003788 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003788:	697b      	ldr	r3, [r7, #20]
	}
 800378a:	4618      	mov	r0, r3
 800378c:	3728      	adds	r7, #40	; 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08c      	sub	sp, #48	; 0x30
 8003796:	af04      	add	r7, sp, #16
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fcee 	bl	8005188 <pvPortMalloc>
 80037ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037b4:	205c      	movs	r0, #92	; 0x5c
 80037b6:	f001 fce7 	bl	8005188 <pvPortMalloc>
 80037ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
 80037c8:	e005      	b.n	80037d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f001 fda8 	bl	8005320 <vPortFree>
 80037d0:	e001      	b.n	80037d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9303      	str	r3, [sp, #12]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	9302      	str	r3, [sp, #8]
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f80e 	bl	800381c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003800:	69f8      	ldr	r0, [r7, #28]
 8003802:	f000 f89b 	bl	800393c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003806:	2301      	movs	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e002      	b.n	8003812 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003812:	69bb      	ldr	r3, [r7, #24]
	}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	461a      	mov	r2, r3
 8003834:	21a5      	movs	r1, #165	; 0xa5
 8003836:	f001 fec9 	bl	80055cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003844:	3b01      	subs	r3, #1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <prvInitialiseNewTask+0x58>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	617b      	str	r3, [r7, #20]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01f      	beq.n	80038ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	e012      	b.n	80038a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	7819      	ldrb	r1, [r3, #0]
 8003888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	3334      	adds	r3, #52	; 0x34
 8003890:	460a      	mov	r2, r1
 8003892:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d006      	beq.n	80038ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	3301      	adds	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2b0f      	cmp	r3, #15
 80038aa:	d9e9      	bls.n	8003880 <prvInitialiseNewTask+0x64>
 80038ac:	e000      	b.n	80038b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80038ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b8:	e003      	b.n	80038c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	2b37      	cmp	r3, #55	; 0x37
 80038c6:	d901      	bls.n	80038cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038c8:	2337      	movs	r3, #55	; 0x37
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	2200      	movs	r2, #0
 80038dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	3304      	adds	r3, #4
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff f882 	bl	80029ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	3318      	adds	r3, #24
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff f87d 	bl	80029ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	2200      	movs	r2, #0
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	68f9      	ldr	r1, [r7, #12]
 800391a:	69b8      	ldr	r0, [r7, #24]
 800391c:	f001 f9e2 	bl	8004ce4 <pxPortInitialiseStack>
 8003920:	4602      	mov	r2, r0
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003932:	bf00      	nop
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003944:	f001 fafe 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <prvAddNewTaskToReadyList+0xc4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <prvAddNewTaskToReadyList+0xc4>)
 8003950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <prvAddNewTaskToReadyList+0xc8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <prvAddNewTaskToReadyList+0xc8>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <prvAddNewTaskToReadyList+0xc4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d110      	bne.n	800398a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003968:	f000 fc16 	bl	8004198 <prvInitialiseTaskLists>
 800396c:	e00d      	b.n	800398a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <prvAddNewTaskToReadyList+0xcc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003976:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <prvAddNewTaskToReadyList+0xc8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	429a      	cmp	r2, r3
 8003982:	d802      	bhi.n	800398a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <prvAddNewTaskToReadyList+0xc8>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <prvAddNewTaskToReadyList+0xd0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <prvAddNewTaskToReadyList+0xd0>)
 8003992:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <prvAddNewTaskToReadyList+0xd0>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <prvAddNewTaskToReadyList+0xd4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d903      	bls.n	80039b0 <prvAddNewTaskToReadyList+0x74>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <prvAddNewTaskToReadyList+0xd4>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <prvAddNewTaskToReadyList+0xd8>)
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7ff f81d 	bl	8002a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039cc:	f001 faea 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <prvAddNewTaskToReadyList+0xcc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <prvAddNewTaskToReadyList+0xc8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d207      	bcs.n	80039f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <prvAddNewTaskToReadyList+0xdc>)
 80039e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000cc4 	.word	0x20000cc4
 8003a04:	200007f0 	.word	0x200007f0
 8003a08:	20000cd0 	.word	0x20000cd0
 8003a0c:	20000ce0 	.word	0x20000ce0
 8003a10:	20000ccc 	.word	0x20000ccc
 8003a14:	200007f4 	.word	0x200007f4
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d017      	beq.n	8003a5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <vTaskDelay+0x60>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <vTaskDelay+0x30>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60bb      	str	r3, [r7, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a4c:	f000 f880 	bl	8003b50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fcea 	bl	800442c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a58:	f000 f888 	bl	8003b6c <xTaskResumeAll>
 8003a5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <vTaskDelay+0x64>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000cec 	.word	0x20000cec
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a92:	463a      	mov	r2, r7
 8003a94:	1d39      	adds	r1, r7, #4
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff52 	bl	8002944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	9202      	str	r2, [sp, #8]
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	4921      	ldr	r1, [pc, #132]	; (8003b38 <vTaskStartScheduler+0xb4>)
 8003ab4:	4821      	ldr	r0, [pc, #132]	; (8003b3c <vTaskStartScheduler+0xb8>)
 8003ab6:	f7ff fe0f 	bl	80036d8 <xTaskCreateStatic>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <vTaskStartScheduler+0xbc>)
 8003abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <vTaskStartScheduler+0xbc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e001      	b.n	8003ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d102      	bne.n	8003ade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ad8:	f000 fcfc 	bl	80044d4 <xTimerCreateTimerTask>
 8003adc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d116      	bne.n	8003b12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	613b      	str	r3, [r7, #16]
}
 8003af6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <vTaskStartScheduler+0xc0>)
 8003afa:	f04f 32ff 	mov.w	r2, #4294967295
 8003afe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <vTaskStartScheduler+0xc4>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <vTaskStartScheduler+0xc8>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b0c:	f001 f978 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b10:	e00e      	b.n	8003b30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d10a      	bne.n	8003b30 <vTaskStartScheduler+0xac>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60fb      	str	r3, [r7, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <vTaskStartScheduler+0xaa>
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	08005f10 	.word	0x08005f10
 8003b3c:	08004169 	.word	0x08004169
 8003b40:	20000ce8 	.word	0x20000ce8
 8003b44:	20000ce4 	.word	0x20000ce4
 8003b48:	20000cd0 	.word	0x20000cd0
 8003b4c:	20000cc8 	.word	0x20000cc8

08003b50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <vTaskSuspendAll+0x18>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <vTaskSuspendAll+0x18>)
 8003b5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20000cec 	.word	0x20000cec

08003b6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <xTaskResumeAll+0x118>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	603b      	str	r3, [r7, #0]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b98:	f001 f9d4 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <xTaskResumeAll+0x118>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <xTaskResumeAll+0x118>)
 8003ba4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <xTaskResumeAll+0x118>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d162      	bne.n	8003c74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bae:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <xTaskResumeAll+0x11c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d05e      	beq.n	8003c74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bb6:	e02f      	b.n	8003c18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb8:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <xTaskResumeAll+0x120>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe ff7b 	bl	8002ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe ff76 	bl	8002ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <xTaskResumeAll+0x124>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d903      	bls.n	8003be8 <xTaskResumeAll+0x7c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <xTaskResumeAll+0x124>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <xTaskResumeAll+0x128>)
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7fe ff01 	bl	8002a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <xTaskResumeAll+0x12c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c12:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <xTaskResumeAll+0x130>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <xTaskResumeAll+0x120>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1cb      	bne.n	8003bb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c26:	f000 fb55 	bl	80042d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <xTaskResumeAll+0x134>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c36:	f000 f847 	bl	8003cc8 <xTaskIncrementTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <xTaskResumeAll+0x130>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f1      	bne.n	8003c36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <xTaskResumeAll+0x134>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <xTaskResumeAll+0x130>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <xTaskResumeAll+0x138>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 f996 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c78:	68bb      	ldr	r3, [r7, #8]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000cec 	.word	0x20000cec
 8003c88:	20000cc4 	.word	0x20000cc4
 8003c8c:	20000c84 	.word	0x20000c84
 8003c90:	20000ccc 	.word	0x20000ccc
 8003c94:	200007f4 	.word	0x200007f4
 8003c98:	200007f0 	.word	0x200007f0
 8003c9c:	20000cd8 	.word	0x20000cd8
 8003ca0:	20000cd4 	.word	0x20000cd4
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <xTaskGetTickCount+0x1c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cb4:	687b      	ldr	r3, [r7, #4]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000cc8 	.word	0x20000cc8

08003cc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <xTaskIncrementTick+0x148>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 808f 	bne.w	8003dfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <xTaskIncrementTick+0x14c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ce4:	4a4b      	ldr	r2, [pc, #300]	; (8003e14 <xTaskIncrementTick+0x14c>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d120      	bne.n	8003d32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	603b      	str	r3, [r7, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <xTaskIncrementTick+0x46>
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <xTaskIncrementTick+0x154>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <xTaskIncrementTick+0x154>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <xTaskIncrementTick+0x158>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <xTaskIncrementTick+0x158>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	f000 fad1 	bl	80042d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d32:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <xTaskIncrementTick+0x15c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d349      	bcc.n	8003dd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <xTaskIncrementTick+0x15c>)
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	601a      	str	r2, [r3, #0]
					break;
 8003d4e:	e03f      	b.n	8003dd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d203      	bcs.n	8003d70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d68:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <xTaskIncrementTick+0x15c>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d6e:	e02f      	b.n	8003dd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe fea3 	bl	8002ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3318      	adds	r3, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fe9a 	bl	8002ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <xTaskIncrementTick+0x160>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d903      	bls.n	8003da0 <xTaskIncrementTick+0xd8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <xTaskIncrementTick+0x160>)
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <xTaskIncrementTick+0x164>)
 8003dae:	441a      	add	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7fe fe25 	bl	8002a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <xTaskIncrementTick+0x168>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3b8      	bcc.n	8003d3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dce:	e7b5      	b.n	8003d3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dd0:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <xTaskIncrementTick+0x168>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4915      	ldr	r1, [pc, #84]	; (8003e2c <xTaskIncrementTick+0x164>)
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d901      	bls.n	8003dec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <xTaskIncrementTick+0x16c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e004      	b.n	8003e04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskIncrementTick+0x170>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <xTaskIncrementTick+0x170>)
 8003e02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e04:	697b      	ldr	r3, [r7, #20]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000cec 	.word	0x20000cec
 8003e14:	20000cc8 	.word	0x20000cc8
 8003e18:	20000c7c 	.word	0x20000c7c
 8003e1c:	20000c80 	.word	0x20000c80
 8003e20:	20000cdc 	.word	0x20000cdc
 8003e24:	20000ce4 	.word	0x20000ce4
 8003e28:	20000ccc 	.word	0x20000ccc
 8003e2c:	200007f4 	.word	0x200007f4
 8003e30:	200007f0 	.word	0x200007f0
 8003e34:	20000cd8 	.word	0x20000cd8
 8003e38:	20000cd4 	.word	0x20000cd4

08003e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e42:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <vTaskSwitchContext+0xa8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <vTaskSwitchContext+0xac>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e50:	e041      	b.n	8003ed6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e52:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <vTaskSwitchContext+0xac>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <vTaskSwitchContext+0xb0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e010      	b.n	8003e82 <vTaskSwitchContext+0x46>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <vTaskSwitchContext+0x40>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	607b      	str	r3, [r7, #4]
}
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <vTaskSwitchContext+0x3e>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	491b      	ldr	r1, [pc, #108]	; (8003ef0 <vTaskSwitchContext+0xb4>)
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0e4      	beq.n	8003e60 <vTaskSwitchContext+0x24>
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <vTaskSwitchContext+0xb4>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d104      	bne.n	8003ec6 <vTaskSwitchContext+0x8a>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <vTaskSwitchContext+0xb8>)
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <vTaskSwitchContext+0xb0>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000cec 	.word	0x20000cec
 8003ee8:	20000cd8 	.word	0x20000cd8
 8003eec:	20000ccc 	.word	0x20000ccc
 8003ef0:	200007f4 	.word	0x200007f4
 8003ef4:	200007f0 	.word	0x200007f0

08003ef8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60fb      	str	r3, [r7, #12]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <vTaskPlaceOnEventList+0x44>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3318      	adds	r3, #24
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe fd91 	bl	8002a4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	6838      	ldr	r0, [r7, #0]
 8003f30:	f000 fa7c 	bl	800442c <prvAddCurrentTaskToDelayedList>
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200007f0 	.word	0x200007f0

08003f40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	617b      	str	r3, [r7, #20]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7fe fd48 	bl	8002a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68b8      	ldr	r0, [r7, #8]
 8003f86:	f000 fa51 	bl	800442c <prvAddCurrentTaskToDelayedList>
	}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200007f0 	.word	0x200007f0

08003f98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	60fb      	str	r3, [r7, #12]
}
 8003fc0:	bf00      	nop
 8003fc2:	e7fe      	b.n	8003fc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fd79 	bl	8002ac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <xTaskRemoveFromEventList+0xb0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11d      	bne.n	8004012 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fd70 	bl	8002ac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <xTaskRemoveFromEventList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d903      	bls.n	8003ff4 <xTaskRemoveFromEventList+0x5c>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a16      	ldr	r2, [pc, #88]	; (800404c <xTaskRemoveFromEventList+0xb4>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <xTaskRemoveFromEventList+0xb8>)
 8004002:	441a      	add	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe fcfb 	bl	8002a06 <vListInsertEnd>
 8004010:	e005      	b.n	800401e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3318      	adds	r3, #24
 8004016:	4619      	mov	r1, r3
 8004018:	480e      	ldr	r0, [pc, #56]	; (8004054 <xTaskRemoveFromEventList+0xbc>)
 800401a:	f7fe fcf4 	bl	8002a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <xTaskRemoveFromEventList+0xc0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d905      	bls.n	8004038 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <xTaskRemoveFromEventList+0xc4>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e001      	b.n	800403c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800403c:	697b      	ldr	r3, [r7, #20]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000cec 	.word	0x20000cec
 800404c:	20000ccc 	.word	0x20000ccc
 8004050:	200007f4 	.word	0x200007f4
 8004054:	20000c84 	.word	0x20000c84
 8004058:	200007f0 	.word	0x200007f0
 800405c:	20000cd8 	.word	0x20000cd8

08004060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <vTaskInternalSetTimeOutState+0x24>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <vTaskInternalSetTimeOutState+0x28>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000cdc 	.word	0x20000cdc
 8004088:	20000cc8 	.word	0x20000cc8

0800408c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	613b      	str	r3, [r7, #16]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040ce:	f000 ff39 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <xTaskCheckForTimeOut+0xbc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d102      	bne.n	80040f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e023      	b.n	800413a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <xTaskCheckForTimeOut+0xc0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d007      	beq.n	800410e <xTaskCheckForTimeOut+0x82>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	d302      	bcc.n	800410e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e015      	b.n	800413a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	429a      	cmp	r2, r3
 8004116:	d20b      	bcs.n	8004130 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff9b 	bl	8004060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e004      	b.n	800413a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800413a:	f000 ff33 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800413e:	69fb      	ldr	r3, [r7, #28]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000cc8 	.word	0x20000cc8
 800414c:	20000cdc 	.word	0x20000cdc

08004150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <vTaskMissedYield+0x14>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20000cd8 	.word	0x20000cd8

08004168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004170:	f000 f852 	bl	8004218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <prvIdleTask+0x28>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d9f9      	bls.n	8004170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <prvIdleTask+0x2c>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800418c:	e7f0      	b.n	8004170 <prvIdleTask+0x8>
 800418e:	bf00      	nop
 8004190:	200007f4 	.word	0x200007f4
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e00c      	b.n	80041be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <prvInitialiseTaskLists+0x60>)
 80041b0:	4413      	add	r3, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fbfa 	bl	80029ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3301      	adds	r3, #1
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b37      	cmp	r3, #55	; 0x37
 80041c2:	d9ef      	bls.n	80041a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041c4:	480d      	ldr	r0, [pc, #52]	; (80041fc <prvInitialiseTaskLists+0x64>)
 80041c6:	f7fe fbf1 	bl	80029ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041ca:	480d      	ldr	r0, [pc, #52]	; (8004200 <prvInitialiseTaskLists+0x68>)
 80041cc:	f7fe fbee 	bl	80029ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041d0:	480c      	ldr	r0, [pc, #48]	; (8004204 <prvInitialiseTaskLists+0x6c>)
 80041d2:	f7fe fbeb 	bl	80029ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041d6:	480c      	ldr	r0, [pc, #48]	; (8004208 <prvInitialiseTaskLists+0x70>)
 80041d8:	f7fe fbe8 	bl	80029ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <prvInitialiseTaskLists+0x74>)
 80041de:	f7fe fbe5 	bl	80029ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <prvInitialiseTaskLists+0x78>)
 80041e4:	4a05      	ldr	r2, [pc, #20]	; (80041fc <prvInitialiseTaskLists+0x64>)
 80041e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <prvInitialiseTaskLists+0x7c>)
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <prvInitialiseTaskLists+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200007f4 	.word	0x200007f4
 80041fc:	20000c54 	.word	0x20000c54
 8004200:	20000c68 	.word	0x20000c68
 8004204:	20000c84 	.word	0x20000c84
 8004208:	20000c98 	.word	0x20000c98
 800420c:	20000cb0 	.word	0x20000cb0
 8004210:	20000c7c 	.word	0x20000c7c
 8004214:	20000c80 	.word	0x20000c80

08004218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800421e:	e019      	b.n	8004254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004220:	f000 fe90 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <prvCheckTasksWaitingTermination+0x50>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fc45 	bl	8002ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <prvCheckTasksWaitingTermination+0x54>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a0b      	ldr	r2, [pc, #44]	; (800426c <prvCheckTasksWaitingTermination+0x54>)
 800423e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <prvCheckTasksWaitingTermination+0x58>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3b01      	subs	r3, #1
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <prvCheckTasksWaitingTermination+0x58>)
 8004248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800424a:	f000 feab 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f810 	bl	8004274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <prvCheckTasksWaitingTermination+0x58>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e1      	bne.n	8004220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000c98 	.word	0x20000c98
 800426c:	20000cc4 	.word	0x20000cc4
 8004270:	20000cac 	.word	0x20000cac

08004274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	4618      	mov	r0, r3
 800428c:	f001 f848 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 f845 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004296:	e018      	b.n	80042ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d103      	bne.n	80042aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 f83c 	bl	8005320 <vPortFree>
	}
 80042a8:	e00f      	b.n	80042ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d00a      	beq.n	80042ca <prvDeleteTCB+0x56>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <prvDeleteTCB+0x54>
	}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <prvResetNextTaskUnblockTime+0x38>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <prvResetNextTaskUnblockTime+0x3c>)
 80042e6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042ec:	e008      	b.n	8004300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <prvResetNextTaskUnblockTime+0x38>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4a04      	ldr	r2, [pc, #16]	; (8004310 <prvResetNextTaskUnblockTime+0x3c>)
 80042fe:	6013      	str	r3, [r2, #0]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	20000c7c 	.word	0x20000c7c
 8004310:	20000ce4 	.word	0x20000ce4

08004314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <xTaskGetSchedulerState+0x34>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004322:	2301      	movs	r3, #1
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	e008      	b.n	800433a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <xTaskGetSchedulerState+0x38>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004330:	2302      	movs	r3, #2
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	e001      	b.n	800433a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800433a:	687b      	ldr	r3, [r7, #4]
	}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	20000cd0 	.word	0x20000cd0
 800434c:	20000cec 	.word	0x20000cec

08004350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d056      	beq.n	8004414 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <xTaskPriorityDisinherit+0xd0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d00a      	beq.n	8004386 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60bb      	str	r3, [r7, #8]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d02c      	beq.n	8004414 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d128      	bne.n	8004414 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fb7a 	bl	8002ac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <xTaskPriorityDisinherit+0xd4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d903      	bls.n	80043f4 <xTaskPriorityDisinherit+0xa4>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <xTaskPriorityDisinherit+0xd4>)
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <xTaskPriorityDisinherit+0xd8>)
 8004402:	441a      	add	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f7fe fafb 	bl	8002a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004410:	2301      	movs	r3, #1
 8004412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004414:	697b      	ldr	r3, [r7, #20]
	}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200007f0 	.word	0x200007f0
 8004424:	20000ccc 	.word	0x20000ccc
 8004428:	200007f4 	.word	0x200007f4

0800442c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <prvAddCurrentTaskToDelayedList+0x90>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fb3c 	bl	8002ac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d10a      	bne.n	8004466 <prvAddCurrentTaskToDelayedList+0x3a>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004456:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4819      	ldr	r0, [pc, #100]	; (80044c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004460:	f7fe fad1 	bl	8002a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004464:	e026      	b.n	80044b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800446e:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	429a      	cmp	r2, r3
 800447c:	d209      	bcs.n	8004492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7fe fadf 	bl	8002a4e <vListInsert>
}
 8004490:	e010      	b.n	80044b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7fe fad5 	bl	8002a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d202      	bcs.n	80044b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000cc8 	.word	0x20000cc8
 80044c0:	200007f0 	.word	0x200007f0
 80044c4:	20000cb0 	.word	0x20000cb0
 80044c8:	20000c80 	.word	0x20000c80
 80044cc:	20000c7c 	.word	0x20000c7c
 80044d0:	20000ce4 	.word	0x20000ce4

080044d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	; 0x28
 80044d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044de:	f000 fba1 	bl	8004c24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <xTimerCreateTimerTask+0x80>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d021      	beq.n	800452e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044f2:	1d3a      	adds	r2, r7, #4
 80044f4:	f107 0108 	add.w	r1, r7, #8
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fa3b 	bl	8002978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	9202      	str	r2, [sp, #8]
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	2302      	movs	r3, #2
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	460a      	mov	r2, r1
 8004514:	4910      	ldr	r1, [pc, #64]	; (8004558 <xTimerCreateTimerTask+0x84>)
 8004516:	4811      	ldr	r0, [pc, #68]	; (800455c <xTimerCreateTimerTask+0x88>)
 8004518:	f7ff f8de 	bl	80036d8 <xTaskCreateStatic>
 800451c:	4603      	mov	r3, r0
 800451e:	4a10      	ldr	r2, [pc, #64]	; (8004560 <xTimerCreateTimerTask+0x8c>)
 8004520:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <xTimerCreateTimerTask+0x8c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800452a:	2301      	movs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	613b      	str	r3, [r7, #16]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800454a:	697b      	ldr	r3, [r7, #20]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000d20 	.word	0x20000d20
 8004558:	08005f18 	.word	0x08005f18
 800455c:	080047cd 	.word	0x080047cd
 8004560:	20000d24 	.word	0x20000d24

08004564 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004572:	202c      	movs	r0, #44	; 0x2c
 8004574:	f000 fe08 	bl	8005188 <pvPortMalloc>
 8004578:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f843 	bl	8004622 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800459c:	697b      	ldr	r3, [r7, #20]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b08a      	sub	sp, #40	; 0x28
 80045aa:	af02      	add	r7, sp, #8
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80045b4:	232c      	movs	r3, #44	; 0x2c
 80045b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b2c      	cmp	r3, #44	; 0x2c
 80045bc:	d00a      	beq.n	80045d4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	61bb      	str	r3, [r7, #24]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	617b      	str	r3, [r7, #20]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f805 	bl	8004622 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004618:	69fb      	ldr	r3, [r7, #28]
	}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	617b      	str	r3, [r7, #20]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01e      	beq.n	8004690 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004652:	f000 fae7 	bl	8004c24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	3304      	adds	r3, #4
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe f9ba 	bl	80029ec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	b2da      	uxtb	r2, r3
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <xTimerGenericCommand+0x98>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02a      	beq.n	8004724 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	dc18      	bgt.n	8004712 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e0:	f7ff fe18 	bl	8004314 <xTaskGetSchedulerState>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d109      	bne.n	80046fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <xTimerGenericCommand+0x98>)
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f107 0110 	add.w	r1, r7, #16
 80046f2:	2300      	movs	r3, #0
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	f7fe fb4b 	bl	8002d90 <xQueueGenericSend>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24
 80046fc:	e012      	b.n	8004724 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <xTimerGenericCommand+0x98>)
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f107 0110 	add.w	r1, r7, #16
 8004706:	2300      	movs	r3, #0
 8004708:	2200      	movs	r2, #0
 800470a:	f7fe fb41 	bl	8002d90 <xQueueGenericSend>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24
 8004710:	e008      	b.n	8004724 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <xTimerGenericCommand+0x98>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f107 0110 	add.w	r1, r7, #16
 800471a:	2300      	movs	r3, #0
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	f7fe fc35 	bl	8002f8c <xQueueGenericSendFromISR>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004726:	4618      	mov	r0, r3
 8004728:	3728      	adds	r7, #40	; 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000d20 	.word	0x20000d20

08004734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <prvProcessExpiredTimer+0x94>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe f9b7 	bl	8002ac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d022      	beq.n	80047a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	18d1      	adds	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f000 f8d1 	bl	8004914 <prvInsertTimerInActiveList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01f      	beq.n	80047b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	2100      	movs	r1, #0
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f7ff ff88 	bl	8004698 <xTimerGenericCommand>
 8004788:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d113      	bne.n	80047b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	4798      	blx	r3
}
 80047c0:	bf00      	nop
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000d18 	.word	0x20000d18

080047cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f857 	bl	800488c <prvGetNextExpireTime>
 80047de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f803 	bl	80047f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ea:	f000 f8d5 	bl	8004998 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ee:	e7f1      	b.n	80047d4 <prvTimerTask+0x8>

080047f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047fa:	f7ff f9a9 	bl	8003b50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f866 	bl	80048d4 <prvSampleTimeNow>
 8004808:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d130      	bne.n	8004872 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <prvProcessTimerOrBlockTask+0x3c>
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	429a      	cmp	r2, r3
 800481c:	d806      	bhi.n	800482c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800481e:	f7ff f9a5 	bl	8003b6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff85 	bl	8004734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800482a:	e024      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <prvProcessTimerOrBlockTask+0x90>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <prvProcessTimerOrBlockTask+0x50>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <prvProcessTimerOrBlockTask+0x52>
 8004840:	2300      	movs	r3, #0
 8004842:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvProcessTimerOrBlockTask+0x94>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	f7fe ff0d 	bl	8003670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004856:	f7ff f989 	bl	8003b6c <xTaskResumeAll>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <prvProcessTimerOrBlockTask+0x98>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
}
 8004870:	e001      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004872:	f7ff f97b 	bl	8003b6c <xTaskResumeAll>
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000d1c 	.word	0x20000d1c
 8004884:	20000d20 	.word	0x20000d20
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <prvGetNextExpireTime+0x44>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <prvGetNextExpireTime+0x16>
 800489e:	2201      	movs	r2, #1
 80048a0:	e000      	b.n	80048a4 <prvGetNextExpireTime+0x18>
 80048a2:	2200      	movs	r2, #0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <prvGetNextExpireTime+0x44>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e001      	b.n	80048c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000d18 	.word	0x20000d18

080048d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048dc:	f7ff f9e4 	bl	8003ca8 <xTaskGetTickCount>
 80048e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <prvSampleTimeNow+0x3c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d205      	bcs.n	80048f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048ec:	f000 f936 	bl	8004b5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e002      	b.n	80048fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <prvSampleTimeNow+0x3c>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000d28 	.word	0x20000d28

08004914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d812      	bhi.n	8004960 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e01b      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <prvInsertTimerInActiveList+0x7c>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fe f878 	bl	8002a4e <vListInsert>
 800495e:	e012      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d206      	bcs.n	8004976 <prvInsertTimerInActiveList+0x62>
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e007      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <prvInsertTimerInActiveList+0x80>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fe f864 	bl	8002a4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000d1c 	.word	0x20000d1c
 8004994:	20000d18 	.word	0x20000d18

08004998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	; 0x38
 800499c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800499e:	e0ca      	b.n	8004b36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da18      	bge.n	80049d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	3304      	adds	r3, #4
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	61fb      	str	r3, [r7, #28]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ce:	6850      	ldr	r0, [r2, #4]
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	4611      	mov	r1, r2
 80049d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f2c0 80aa 	blt.w	8004b34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe f865 	bl	8002ac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049f6:	463b      	mov	r3, r7
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff6b 	bl	80048d4 <prvSampleTimeNow>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b09      	cmp	r3, #9
 8004a04:	f200 8097 	bhi.w	8004b36 <prvProcessReceivedCommands+0x19e>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <prvProcessReceivedCommands+0x78>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a39 	.word	0x08004a39
 8004a1c:	08004aad 	.word	0x08004aad
 8004a20:	08004ac1 	.word	0x08004ac1
 8004a24:	08004b0b 	.word	0x08004b0b
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a39 	.word	0x08004a39
 8004a30:	08004aad 	.word	0x08004aad
 8004a34:	08004ac1 	.word	0x08004ac1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	18d1      	adds	r1, r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a58:	f7ff ff5c 	bl	8004914 <prvInsertTimerInActiveList>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d069      	beq.n	8004b36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d05e      	beq.n	8004b36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	441a      	add	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	2100      	movs	r1, #0
 8004a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8a:	f7ff fe05 	bl	8004698 <xTimerGenericCommand>
 8004a8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d14f      	bne.n	8004b36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	61bb      	str	r3, [r7, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004abe:	e03a      	b.n	8004b36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	617b      	str	r3, [r7, #20]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	18d1      	adds	r1, r2, r3
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b04:	f7ff ff06 	bl	8004914 <prvInsertTimerInActiveList>
					break;
 8004b08:	e015      	b.n	8004b36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1a:	f000 fc01 	bl	8005320 <vPortFree>
 8004b1e:	e00a      	b.n	8004b36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b32:	e000      	b.n	8004b36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <prvProcessReceivedCommands+0x1c0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	1d39      	adds	r1, r7, #4
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fac0 	bl	80030c4 <xQueueReceive>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f47f af2a 	bne.w	80049a0 <prvProcessReceivedCommands+0x8>
	}
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3730      	adds	r7, #48	; 0x30
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000d20 	.word	0x20000d20

08004b5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b62:	e048      	b.n	8004bf6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <prvSwitchTimerLists+0xc0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6e:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <prvSwitchTimerLists+0xc0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd ff9f 	bl	8002ac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02e      	beq.n	8004bf6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d90e      	bls.n	8004bc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bb6:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <prvSwitchTimerLists+0xc0>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7fd ff44 	bl	8002a4e <vListInsert>
 8004bc6:	e016      	b.n	8004bf6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff fd60 	bl	8004698 <xTimerGenericCommand>
 8004bd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	603b      	str	r3, [r7, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <prvSwitchTimerLists+0xc0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1b1      	bne.n	8004b64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <prvSwitchTimerLists+0xc0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <prvSwitchTimerLists+0xc4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <prvSwitchTimerLists+0xc0>)
 8004c0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <prvSwitchTimerLists+0xc4>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	6013      	str	r3, [r2, #0]
}
 8004c14:	bf00      	nop
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000d18 	.word	0x20000d18
 8004c20:	20000d1c 	.word	0x20000d1c

08004c24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c2a:	f000 f98b 	bl	8004f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d120      	bne.n	8004c78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c36:	4814      	ldr	r0, [pc, #80]	; (8004c88 <prvCheckForValidListAndQueue+0x64>)
 8004c38:	f7fd feb8 	bl	80029ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c3c:	4813      	ldr	r0, [pc, #76]	; (8004c8c <prvCheckForValidListAndQueue+0x68>)
 8004c3e:	f7fd feb5 	bl	80029ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <prvCheckForValidListAndQueue+0x6c>)
 8004c44:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <prvCheckForValidListAndQueue+0x64>)
 8004c46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c48:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <prvCheckForValidListAndQueue+0x70>)
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <prvCheckForValidListAndQueue+0x68>)
 8004c4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <prvCheckForValidListAndQueue+0x74>)
 8004c54:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <prvCheckForValidListAndQueue+0x78>)
 8004c56:	2110      	movs	r1, #16
 8004c58:	200a      	movs	r0, #10
 8004c5a:	f7fd ffc3 	bl	8002be4 <xQueueGenericCreateStatic>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	490b      	ldr	r1, [pc, #44]	; (8004ca0 <prvCheckForValidListAndQueue+0x7c>)
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fcd2 	bl	800361c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c78:	f000 f994 	bl	8004fa4 <vPortExitCritical>
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000d20 	.word	0x20000d20
 8004c88:	20000cf0 	.word	0x20000cf0
 8004c8c:	20000d04 	.word	0x20000d04
 8004c90:	20000d18 	.word	0x20000d18
 8004c94:	20000d1c 	.word	0x20000d1c
 8004c98:	20000dcc 	.word	0x20000dcc
 8004c9c:	20000d2c 	.word	0x20000d2c
 8004ca0:	08005f20 	.word	0x08005f20

08004ca4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <pvTimerGetTimerID+0x28>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60fb      	str	r3, [r7, #12]
}
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8004ccc:	f000 f93a 	bl	8004f44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004cd6:	f000 f965 	bl	8004fa4 <vPortExitCritical>

	return pvReturn;
 8004cda:	693b      	ldr	r3, [r7, #16]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3b04      	subs	r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b04      	subs	r3, #4
 8004d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f023 0201 	bic.w	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3b04      	subs	r3, #4
 8004d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <pxPortInitialiseStack+0x64>)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b14      	subs	r3, #20
 8004d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b04      	subs	r3, #4
 8004d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f06f 0202 	mvn.w	r2, #2
 8004d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3b20      	subs	r3, #32
 8004d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	08004d4d 	.word	0x08004d4d

08004d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <prvTaskExitError+0x54>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d00a      	beq.n	8004d76 <prvTaskExitError+0x2a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <prvTaskExitError+0x28>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60bb      	str	r3, [r7, #8]
}
 8004d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d8a:	bf00      	nop
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0fc      	beq.n	8004d8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	2000000c 	.word	0x2000000c
	...

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7fe ff96 	bl	8003e3c <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff1c 	bl	8004d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	20000e1c 	.word	0x20000e1c
 8004f34:	20000e20 	.word	0x20000e20
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe ff04 	bl	8003e3c <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fe21 	bl	8003cc8 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <xPortSysTickHandler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	20000e1c 	.word	0x20000e1c
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20000e20 	.word	0x20000e20

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7fe fcdc 	bl	8003b50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe fc48 	bl	8003b6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20004a2c 	.word	0x20004a2c
 800530c:	20004a40 	.word	0x20004a40
 8005310:	20004a30 	.word	0x20004a30
 8005314:	20004a24 	.word	0x20004a24
 8005318:	20004a34 	.word	0x20004a34
 800531c:	20004a38 	.word	0x20004a38

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fbd2 	bl	8003b50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe fbcf 	bl	8003b6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20004a40 	.word	0x20004a40
 80053dc:	20004a30 	.word	0x20004a30
 80053e0:	20004a3c 	.word	0x20004a3c

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000e24 	.word	0x20000e24
 8005494:	20004a24 	.word	0x20004a24
 8005498:	20004a2c 	.word	0x20004a2c
 800549c:	20004a34 	.word	0x20004a34
 80054a0:	20004a30 	.word	0x20004a30
 80054a4:	20004a40 	.word	0x20004a40

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20004a24 	.word	0x20004a24
 8005558:	20004a2c 	.word	0x20004a2c

0800555c <__errno>:
 800555c:	4b01      	ldr	r3, [pc, #4]	; (8005564 <__errno+0x8>)
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000010 	.word	0x20000010

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4d0d      	ldr	r5, [pc, #52]	; (80055a0 <__libc_init_array+0x38>)
 800556c:	4c0d      	ldr	r4, [pc, #52]	; (80055a4 <__libc_init_array+0x3c>)
 800556e:	1b64      	subs	r4, r4, r5
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	2600      	movs	r6, #0
 8005574:	42a6      	cmp	r6, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	4d0b      	ldr	r5, [pc, #44]	; (80055a8 <__libc_init_array+0x40>)
 800557a:	4c0c      	ldr	r4, [pc, #48]	; (80055ac <__libc_init_array+0x44>)
 800557c:	f000 fc8e 	bl	8005e9c <_init>
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	2600      	movs	r6, #0
 8005586:	42a6      	cmp	r6, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005590:	4798      	blx	r3
 8005592:	3601      	adds	r6, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	f855 3b04 	ldr.w	r3, [r5], #4
 800559a:	4798      	blx	r3
 800559c:	3601      	adds	r6, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	08005ffc 	.word	0x08005ffc
 80055a4:	08005ffc 	.word	0x08005ffc
 80055a8:	08005ffc 	.word	0x08005ffc
 80055ac:	08006000 	.word	0x08006000

080055b0 <memcpy>:
 80055b0:	440a      	add	r2, r1
 80055b2:	4291      	cmp	r1, r2
 80055b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b8:	d100      	bne.n	80055bc <memcpy+0xc>
 80055ba:	4770      	bx	lr
 80055bc:	b510      	push	{r4, lr}
 80055be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c6:	4291      	cmp	r1, r2
 80055c8:	d1f9      	bne.n	80055be <memcpy+0xe>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <memset>:
 80055cc:	4402      	add	r2, r0
 80055ce:	4603      	mov	r3, r0
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d100      	bne.n	80055d6 <memset+0xa>
 80055d4:	4770      	bx	lr
 80055d6:	f803 1b01 	strb.w	r1, [r3], #1
 80055da:	e7f9      	b.n	80055d0 <memset+0x4>

080055dc <siprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	b500      	push	{lr}
 80055e0:	b09c      	sub	sp, #112	; 0x70
 80055e2:	ab1d      	add	r3, sp, #116	; 0x74
 80055e4:	9002      	str	r0, [sp, #8]
 80055e6:	9006      	str	r0, [sp, #24]
 80055e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ec:	4809      	ldr	r0, [pc, #36]	; (8005614 <siprintf+0x38>)
 80055ee:	9107      	str	r1, [sp, #28]
 80055f0:	9104      	str	r1, [sp, #16]
 80055f2:	4909      	ldr	r1, [pc, #36]	; (8005618 <siprintf+0x3c>)
 80055f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	a902      	add	r1, sp, #8
 8005600:	f000 f868 	bl	80056d4 <_svfiprintf_r>
 8005604:	9b02      	ldr	r3, [sp, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	b01c      	add	sp, #112	; 0x70
 800560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005610:	b003      	add	sp, #12
 8005612:	4770      	bx	lr
 8005614:	20000010 	.word	0x20000010
 8005618:	ffff0208 	.word	0xffff0208

0800561c <__ssputs_r>:
 800561c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	688e      	ldr	r6, [r1, #8]
 8005622:	429e      	cmp	r6, r3
 8005624:	4682      	mov	sl, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4690      	mov	r8, r2
 800562a:	461f      	mov	r7, r3
 800562c:	d838      	bhi.n	80056a0 <__ssputs_r+0x84>
 800562e:	898a      	ldrh	r2, [r1, #12]
 8005630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005634:	d032      	beq.n	800569c <__ssputs_r+0x80>
 8005636:	6825      	ldr	r5, [r4, #0]
 8005638:	6909      	ldr	r1, [r1, #16]
 800563a:	eba5 0901 	sub.w	r9, r5, r1
 800563e:	6965      	ldr	r5, [r4, #20]
 8005640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005648:	3301      	adds	r3, #1
 800564a:	444b      	add	r3, r9
 800564c:	106d      	asrs	r5, r5, #1
 800564e:	429d      	cmp	r5, r3
 8005650:	bf38      	it	cc
 8005652:	461d      	movcc	r5, r3
 8005654:	0553      	lsls	r3, r2, #21
 8005656:	d531      	bpl.n	80056bc <__ssputs_r+0xa0>
 8005658:	4629      	mov	r1, r5
 800565a:	f000 fb55 	bl	8005d08 <_malloc_r>
 800565e:	4606      	mov	r6, r0
 8005660:	b950      	cbnz	r0, 8005678 <__ssputs_r+0x5c>
 8005662:	230c      	movs	r3, #12
 8005664:	f8ca 3000 	str.w	r3, [sl]
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005678:	6921      	ldr	r1, [r4, #16]
 800567a:	464a      	mov	r2, r9
 800567c:	f7ff ff98 	bl	80055b0 <memcpy>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	6126      	str	r6, [r4, #16]
 800568e:	6165      	str	r5, [r4, #20]
 8005690:	444e      	add	r6, r9
 8005692:	eba5 0509 	sub.w	r5, r5, r9
 8005696:	6026      	str	r6, [r4, #0]
 8005698:	60a5      	str	r5, [r4, #8]
 800569a:	463e      	mov	r6, r7
 800569c:	42be      	cmp	r6, r7
 800569e:	d900      	bls.n	80056a2 <__ssputs_r+0x86>
 80056a0:	463e      	mov	r6, r7
 80056a2:	6820      	ldr	r0, [r4, #0]
 80056a4:	4632      	mov	r2, r6
 80056a6:	4641      	mov	r1, r8
 80056a8:	f000 faa8 	bl	8005bfc <memmove>
 80056ac:	68a3      	ldr	r3, [r4, #8]
 80056ae:	1b9b      	subs	r3, r3, r6
 80056b0:	60a3      	str	r3, [r4, #8]
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	4433      	add	r3, r6
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	2000      	movs	r0, #0
 80056ba:	e7db      	b.n	8005674 <__ssputs_r+0x58>
 80056bc:	462a      	mov	r2, r5
 80056be:	f000 fb97 	bl	8005df0 <_realloc_r>
 80056c2:	4606      	mov	r6, r0
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d1e1      	bne.n	800568c <__ssputs_r+0x70>
 80056c8:	6921      	ldr	r1, [r4, #16]
 80056ca:	4650      	mov	r0, sl
 80056cc:	f000 fab0 	bl	8005c30 <_free_r>
 80056d0:	e7c7      	b.n	8005662 <__ssputs_r+0x46>
	...

080056d4 <_svfiprintf_r>:
 80056d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d8:	4698      	mov	r8, r3
 80056da:	898b      	ldrh	r3, [r1, #12]
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	b09d      	sub	sp, #116	; 0x74
 80056e0:	4607      	mov	r7, r0
 80056e2:	460d      	mov	r5, r1
 80056e4:	4614      	mov	r4, r2
 80056e6:	d50e      	bpl.n	8005706 <_svfiprintf_r+0x32>
 80056e8:	690b      	ldr	r3, [r1, #16]
 80056ea:	b963      	cbnz	r3, 8005706 <_svfiprintf_r+0x32>
 80056ec:	2140      	movs	r1, #64	; 0x40
 80056ee:	f000 fb0b 	bl	8005d08 <_malloc_r>
 80056f2:	6028      	str	r0, [r5, #0]
 80056f4:	6128      	str	r0, [r5, #16]
 80056f6:	b920      	cbnz	r0, 8005702 <_svfiprintf_r+0x2e>
 80056f8:	230c      	movs	r3, #12
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	e0d1      	b.n	80058a6 <_svfiprintf_r+0x1d2>
 8005702:	2340      	movs	r3, #64	; 0x40
 8005704:	616b      	str	r3, [r5, #20]
 8005706:	2300      	movs	r3, #0
 8005708:	9309      	str	r3, [sp, #36]	; 0x24
 800570a:	2320      	movs	r3, #32
 800570c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005710:	f8cd 800c 	str.w	r8, [sp, #12]
 8005714:	2330      	movs	r3, #48	; 0x30
 8005716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058c0 <_svfiprintf_r+0x1ec>
 800571a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800571e:	f04f 0901 	mov.w	r9, #1
 8005722:	4623      	mov	r3, r4
 8005724:	469a      	mov	sl, r3
 8005726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800572a:	b10a      	cbz	r2, 8005730 <_svfiprintf_r+0x5c>
 800572c:	2a25      	cmp	r2, #37	; 0x25
 800572e:	d1f9      	bne.n	8005724 <_svfiprintf_r+0x50>
 8005730:	ebba 0b04 	subs.w	fp, sl, r4
 8005734:	d00b      	beq.n	800574e <_svfiprintf_r+0x7a>
 8005736:	465b      	mov	r3, fp
 8005738:	4622      	mov	r2, r4
 800573a:	4629      	mov	r1, r5
 800573c:	4638      	mov	r0, r7
 800573e:	f7ff ff6d 	bl	800561c <__ssputs_r>
 8005742:	3001      	adds	r0, #1
 8005744:	f000 80aa 	beq.w	800589c <_svfiprintf_r+0x1c8>
 8005748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800574a:	445a      	add	r2, fp
 800574c:	9209      	str	r2, [sp, #36]	; 0x24
 800574e:	f89a 3000 	ldrb.w	r3, [sl]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80a2 	beq.w	800589c <_svfiprintf_r+0x1c8>
 8005758:	2300      	movs	r3, #0
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005762:	f10a 0a01 	add.w	sl, sl, #1
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	9307      	str	r3, [sp, #28]
 800576a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800576e:	931a      	str	r3, [sp, #104]	; 0x68
 8005770:	4654      	mov	r4, sl
 8005772:	2205      	movs	r2, #5
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	4851      	ldr	r0, [pc, #324]	; (80058c0 <_svfiprintf_r+0x1ec>)
 800577a:	f7fa fd39 	bl	80001f0 <memchr>
 800577e:	9a04      	ldr	r2, [sp, #16]
 8005780:	b9d8      	cbnz	r0, 80057ba <_svfiprintf_r+0xe6>
 8005782:	06d0      	lsls	r0, r2, #27
 8005784:	bf44      	itt	mi
 8005786:	2320      	movmi	r3, #32
 8005788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578c:	0711      	lsls	r1, r2, #28
 800578e:	bf44      	itt	mi
 8005790:	232b      	movmi	r3, #43	; 0x2b
 8005792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005796:	f89a 3000 	ldrb.w	r3, [sl]
 800579a:	2b2a      	cmp	r3, #42	; 0x2a
 800579c:	d015      	beq.n	80057ca <_svfiprintf_r+0xf6>
 800579e:	9a07      	ldr	r2, [sp, #28]
 80057a0:	4654      	mov	r4, sl
 80057a2:	2000      	movs	r0, #0
 80057a4:	f04f 0c0a 	mov.w	ip, #10
 80057a8:	4621      	mov	r1, r4
 80057aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ae:	3b30      	subs	r3, #48	; 0x30
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d94e      	bls.n	8005852 <_svfiprintf_r+0x17e>
 80057b4:	b1b0      	cbz	r0, 80057e4 <_svfiprintf_r+0x110>
 80057b6:	9207      	str	r2, [sp, #28]
 80057b8:	e014      	b.n	80057e4 <_svfiprintf_r+0x110>
 80057ba:	eba0 0308 	sub.w	r3, r0, r8
 80057be:	fa09 f303 	lsl.w	r3, r9, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	46a2      	mov	sl, r4
 80057c8:	e7d2      	b.n	8005770 <_svfiprintf_r+0x9c>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	1d19      	adds	r1, r3, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	9103      	str	r1, [sp, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bfbb      	ittet	lt
 80057d6:	425b      	neglt	r3, r3
 80057d8:	f042 0202 	orrlt.w	r2, r2, #2
 80057dc:	9307      	strge	r3, [sp, #28]
 80057de:	9307      	strlt	r3, [sp, #28]
 80057e0:	bfb8      	it	lt
 80057e2:	9204      	strlt	r2, [sp, #16]
 80057e4:	7823      	ldrb	r3, [r4, #0]
 80057e6:	2b2e      	cmp	r3, #46	; 0x2e
 80057e8:	d10c      	bne.n	8005804 <_svfiprintf_r+0x130>
 80057ea:	7863      	ldrb	r3, [r4, #1]
 80057ec:	2b2a      	cmp	r3, #42	; 0x2a
 80057ee:	d135      	bne.n	800585c <_svfiprintf_r+0x188>
 80057f0:	9b03      	ldr	r3, [sp, #12]
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	9203      	str	r2, [sp, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bfb8      	it	lt
 80057fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005800:	3402      	adds	r4, #2
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058d0 <_svfiprintf_r+0x1fc>
 8005808:	7821      	ldrb	r1, [r4, #0]
 800580a:	2203      	movs	r2, #3
 800580c:	4650      	mov	r0, sl
 800580e:	f7fa fcef 	bl	80001f0 <memchr>
 8005812:	b140      	cbz	r0, 8005826 <_svfiprintf_r+0x152>
 8005814:	2340      	movs	r3, #64	; 0x40
 8005816:	eba0 000a 	sub.w	r0, r0, sl
 800581a:	fa03 f000 	lsl.w	r0, r3, r0
 800581e:	9b04      	ldr	r3, [sp, #16]
 8005820:	4303      	orrs	r3, r0
 8005822:	3401      	adds	r4, #1
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582a:	4826      	ldr	r0, [pc, #152]	; (80058c4 <_svfiprintf_r+0x1f0>)
 800582c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005830:	2206      	movs	r2, #6
 8005832:	f7fa fcdd 	bl	80001f0 <memchr>
 8005836:	2800      	cmp	r0, #0
 8005838:	d038      	beq.n	80058ac <_svfiprintf_r+0x1d8>
 800583a:	4b23      	ldr	r3, [pc, #140]	; (80058c8 <_svfiprintf_r+0x1f4>)
 800583c:	bb1b      	cbnz	r3, 8005886 <_svfiprintf_r+0x1b2>
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	3307      	adds	r3, #7
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	3308      	adds	r3, #8
 8005848:	9303      	str	r3, [sp, #12]
 800584a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584c:	4433      	add	r3, r6
 800584e:	9309      	str	r3, [sp, #36]	; 0x24
 8005850:	e767      	b.n	8005722 <_svfiprintf_r+0x4e>
 8005852:	fb0c 3202 	mla	r2, ip, r2, r3
 8005856:	460c      	mov	r4, r1
 8005858:	2001      	movs	r0, #1
 800585a:	e7a5      	b.n	80057a8 <_svfiprintf_r+0xd4>
 800585c:	2300      	movs	r3, #0
 800585e:	3401      	adds	r4, #1
 8005860:	9305      	str	r3, [sp, #20]
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0c0a 	mov.w	ip, #10
 8005868:	4620      	mov	r0, r4
 800586a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800586e:	3a30      	subs	r2, #48	; 0x30
 8005870:	2a09      	cmp	r2, #9
 8005872:	d903      	bls.n	800587c <_svfiprintf_r+0x1a8>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0c5      	beq.n	8005804 <_svfiprintf_r+0x130>
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	e7c3      	b.n	8005804 <_svfiprintf_r+0x130>
 800587c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005880:	4604      	mov	r4, r0
 8005882:	2301      	movs	r3, #1
 8005884:	e7f0      	b.n	8005868 <_svfiprintf_r+0x194>
 8005886:	ab03      	add	r3, sp, #12
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	462a      	mov	r2, r5
 800588c:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <_svfiprintf_r+0x1f8>)
 800588e:	a904      	add	r1, sp, #16
 8005890:	4638      	mov	r0, r7
 8005892:	f3af 8000 	nop.w
 8005896:	1c42      	adds	r2, r0, #1
 8005898:	4606      	mov	r6, r0
 800589a:	d1d6      	bne.n	800584a <_svfiprintf_r+0x176>
 800589c:	89ab      	ldrh	r3, [r5, #12]
 800589e:	065b      	lsls	r3, r3, #25
 80058a0:	f53f af2c 	bmi.w	80056fc <_svfiprintf_r+0x28>
 80058a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058a6:	b01d      	add	sp, #116	; 0x74
 80058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ac:	ab03      	add	r3, sp, #12
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	462a      	mov	r2, r5
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <_svfiprintf_r+0x1f8>)
 80058b4:	a904      	add	r1, sp, #16
 80058b6:	4638      	mov	r0, r7
 80058b8:	f000 f87a 	bl	80059b0 <_printf_i>
 80058bc:	e7eb      	b.n	8005896 <_svfiprintf_r+0x1c2>
 80058be:	bf00      	nop
 80058c0:	08005fc0 	.word	0x08005fc0
 80058c4:	08005fca 	.word	0x08005fca
 80058c8:	00000000 	.word	0x00000000
 80058cc:	0800561d 	.word	0x0800561d
 80058d0:	08005fc6 	.word	0x08005fc6

080058d4 <_printf_common>:
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	4616      	mov	r6, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	688a      	ldr	r2, [r1, #8]
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bfb8      	it	lt
 80058e8:	4613      	movlt	r3, r2
 80058ea:	6033      	str	r3, [r6, #0]
 80058ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f0:	4607      	mov	r7, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	b10a      	cbz	r2, 80058fa <_printf_common+0x26>
 80058f6:	3301      	adds	r3, #1
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	0699      	lsls	r1, r3, #26
 80058fe:	bf42      	ittt	mi
 8005900:	6833      	ldrmi	r3, [r6, #0]
 8005902:	3302      	addmi	r3, #2
 8005904:	6033      	strmi	r3, [r6, #0]
 8005906:	6825      	ldr	r5, [r4, #0]
 8005908:	f015 0506 	ands.w	r5, r5, #6
 800590c:	d106      	bne.n	800591c <_printf_common+0x48>
 800590e:	f104 0a19 	add.w	sl, r4, #25
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	6832      	ldr	r2, [r6, #0]
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	42ab      	cmp	r3, r5
 800591a:	dc26      	bgt.n	800596a <_printf_common+0x96>
 800591c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005920:	1e13      	subs	r3, r2, #0
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	bf18      	it	ne
 8005926:	2301      	movne	r3, #1
 8005928:	0692      	lsls	r2, r2, #26
 800592a:	d42b      	bmi.n	8005984 <_printf_common+0xb0>
 800592c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005930:	4649      	mov	r1, r9
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d01e      	beq.n	8005978 <_printf_common+0xa4>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	68e5      	ldr	r5, [r4, #12]
 800593e:	6832      	ldr	r2, [r6, #0]
 8005940:	f003 0306 	and.w	r3, r3, #6
 8005944:	2b04      	cmp	r3, #4
 8005946:	bf08      	it	eq
 8005948:	1aad      	subeq	r5, r5, r2
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	6922      	ldr	r2, [r4, #16]
 800594e:	bf0c      	ite	eq
 8005950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005954:	2500      	movne	r5, #0
 8005956:	4293      	cmp	r3, r2
 8005958:	bfc4      	itt	gt
 800595a:	1a9b      	subgt	r3, r3, r2
 800595c:	18ed      	addgt	r5, r5, r3
 800595e:	2600      	movs	r6, #0
 8005960:	341a      	adds	r4, #26
 8005962:	42b5      	cmp	r5, r6
 8005964:	d11a      	bne.n	800599c <_printf_common+0xc8>
 8005966:	2000      	movs	r0, #0
 8005968:	e008      	b.n	800597c <_printf_common+0xa8>
 800596a:	2301      	movs	r3, #1
 800596c:	4652      	mov	r2, sl
 800596e:	4649      	mov	r1, r9
 8005970:	4638      	mov	r0, r7
 8005972:	47c0      	blx	r8
 8005974:	3001      	adds	r0, #1
 8005976:	d103      	bne.n	8005980 <_printf_common+0xac>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005980:	3501      	adds	r5, #1
 8005982:	e7c6      	b.n	8005912 <_printf_common+0x3e>
 8005984:	18e1      	adds	r1, r4, r3
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	2030      	movs	r0, #48	; 0x30
 800598a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800598e:	4422      	add	r2, r4
 8005990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005998:	3302      	adds	r3, #2
 800599a:	e7c7      	b.n	800592c <_printf_common+0x58>
 800599c:	2301      	movs	r3, #1
 800599e:	4622      	mov	r2, r4
 80059a0:	4649      	mov	r1, r9
 80059a2:	4638      	mov	r0, r7
 80059a4:	47c0      	blx	r8
 80059a6:	3001      	adds	r0, #1
 80059a8:	d0e6      	beq.n	8005978 <_printf_common+0xa4>
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7d9      	b.n	8005962 <_printf_common+0x8e>
	...

080059b0 <_printf_i>:
 80059b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	7e0f      	ldrb	r7, [r1, #24]
 80059b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059b8:	2f78      	cmp	r7, #120	; 0x78
 80059ba:	4691      	mov	r9, r2
 80059bc:	4680      	mov	r8, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	469a      	mov	sl, r3
 80059c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059c6:	d807      	bhi.n	80059d8 <_printf_i+0x28>
 80059c8:	2f62      	cmp	r7, #98	; 0x62
 80059ca:	d80a      	bhi.n	80059e2 <_printf_i+0x32>
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	f000 80d8 	beq.w	8005b82 <_printf_i+0x1d2>
 80059d2:	2f58      	cmp	r7, #88	; 0x58
 80059d4:	f000 80a3 	beq.w	8005b1e <_printf_i+0x16e>
 80059d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059e0:	e03a      	b.n	8005a58 <_printf_i+0xa8>
 80059e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059e6:	2b15      	cmp	r3, #21
 80059e8:	d8f6      	bhi.n	80059d8 <_printf_i+0x28>
 80059ea:	a101      	add	r1, pc, #4	; (adr r1, 80059f0 <_printf_i+0x40>)
 80059ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f0:	08005a49 	.word	0x08005a49
 80059f4:	08005a5d 	.word	0x08005a5d
 80059f8:	080059d9 	.word	0x080059d9
 80059fc:	080059d9 	.word	0x080059d9
 8005a00:	080059d9 	.word	0x080059d9
 8005a04:	080059d9 	.word	0x080059d9
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	080059d9 	.word	0x080059d9
 8005a10:	080059d9 	.word	0x080059d9
 8005a14:	080059d9 	.word	0x080059d9
 8005a18:	080059d9 	.word	0x080059d9
 8005a1c:	08005b69 	.word	0x08005b69
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005b4b 	.word	0x08005b4b
 8005a28:	080059d9 	.word	0x080059d9
 8005a2c:	080059d9 	.word	0x080059d9
 8005a30:	08005b8b 	.word	0x08005b8b
 8005a34:	080059d9 	.word	0x080059d9
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	080059d9 	.word	0x080059d9
 8005a40:	080059d9 	.word	0x080059d9
 8005a44:	08005b53 	.word	0x08005b53
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0a3      	b.n	8005ba4 <_printf_i+0x1f4>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	6829      	ldr	r1, [r5, #0]
 8005a60:	0606      	lsls	r6, r0, #24
 8005a62:	f101 0304 	add.w	r3, r1, #4
 8005a66:	d50a      	bpl.n	8005a7e <_printf_i+0xce>
 8005a68:	680e      	ldr	r6, [r1, #0]
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	da03      	bge.n	8005a78 <_printf_i+0xc8>
 8005a70:	232d      	movs	r3, #45	; 0x2d
 8005a72:	4276      	negs	r6, r6
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	485e      	ldr	r0, [pc, #376]	; (8005bf4 <_printf_i+0x244>)
 8005a7a:	230a      	movs	r3, #10
 8005a7c:	e019      	b.n	8005ab2 <_printf_i+0x102>
 8005a7e:	680e      	ldr	r6, [r1, #0]
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a86:	bf18      	it	ne
 8005a88:	b236      	sxthne	r6, r6
 8005a8a:	e7ef      	b.n	8005a6c <_printf_i+0xbc>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	6820      	ldr	r0, [r4, #0]
 8005a90:	1d19      	adds	r1, r3, #4
 8005a92:	6029      	str	r1, [r5, #0]
 8005a94:	0601      	lsls	r1, r0, #24
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0xec>
 8005a98:	681e      	ldr	r6, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0xf2>
 8005a9c:	0646      	lsls	r6, r0, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0xe8>
 8005aa0:	881e      	ldrh	r6, [r3, #0]
 8005aa2:	4854      	ldr	r0, [pc, #336]	; (8005bf4 <_printf_i+0x244>)
 8005aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2308      	moveq	r3, #8
 8005aaa:	230a      	movne	r3, #10
 8005aac:	2100      	movs	r1, #0
 8005aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ab2:	6865      	ldr	r5, [r4, #4]
 8005ab4:	60a5      	str	r5, [r4, #8]
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	bfa2      	ittt	ge
 8005aba:	6821      	ldrge	r1, [r4, #0]
 8005abc:	f021 0104 	bicge.w	r1, r1, #4
 8005ac0:	6021      	strge	r1, [r4, #0]
 8005ac2:	b90e      	cbnz	r6, 8005ac8 <_printf_i+0x118>
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	d04d      	beq.n	8005b64 <_printf_i+0x1b4>
 8005ac8:	4615      	mov	r5, r2
 8005aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ace:	fb03 6711 	mls	r7, r3, r1, r6
 8005ad2:	5dc7      	ldrb	r7, [r0, r7]
 8005ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ad8:	4637      	mov	r7, r6
 8005ada:	42bb      	cmp	r3, r7
 8005adc:	460e      	mov	r6, r1
 8005ade:	d9f4      	bls.n	8005aca <_printf_i+0x11a>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d10b      	bne.n	8005afc <_printf_i+0x14c>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07de      	lsls	r6, r3, #31
 8005ae8:	d508      	bpl.n	8005afc <_printf_i+0x14c>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6861      	ldr	r1, [r4, #4]
 8005aee:	4299      	cmp	r1, r3
 8005af0:	bfde      	ittt	le
 8005af2:	2330      	movle	r3, #48	; 0x30
 8005af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005afc:	1b52      	subs	r2, r2, r5
 8005afe:	6122      	str	r2, [r4, #16]
 8005b00:	f8cd a000 	str.w	sl, [sp]
 8005b04:	464b      	mov	r3, r9
 8005b06:	aa03      	add	r2, sp, #12
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fee2 	bl	80058d4 <_printf_common>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d14c      	bne.n	8005bae <_printf_i+0x1fe>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	b004      	add	sp, #16
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	4835      	ldr	r0, [pc, #212]	; (8005bf4 <_printf_i+0x244>)
 8005b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b24:	6829      	ldr	r1, [r5, #0]
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b2c:	6029      	str	r1, [r5, #0]
 8005b2e:	061d      	lsls	r5, r3, #24
 8005b30:	d514      	bpl.n	8005b5c <_printf_i+0x1ac>
 8005b32:	07df      	lsls	r7, r3, #31
 8005b34:	bf44      	itt	mi
 8005b36:	f043 0320 	orrmi.w	r3, r3, #32
 8005b3a:	6023      	strmi	r3, [r4, #0]
 8005b3c:	b91e      	cbnz	r6, 8005b46 <_printf_i+0x196>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f023 0320 	bic.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2310      	movs	r3, #16
 8005b48:	e7b0      	b.n	8005aac <_printf_i+0xfc>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f043 0320 	orr.w	r3, r3, #32
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	2378      	movs	r3, #120	; 0x78
 8005b54:	4828      	ldr	r0, [pc, #160]	; (8005bf8 <_printf_i+0x248>)
 8005b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b5a:	e7e3      	b.n	8005b24 <_printf_i+0x174>
 8005b5c:	0659      	lsls	r1, r3, #25
 8005b5e:	bf48      	it	mi
 8005b60:	b2b6      	uxthmi	r6, r6
 8005b62:	e7e6      	b.n	8005b32 <_printf_i+0x182>
 8005b64:	4615      	mov	r5, r2
 8005b66:	e7bb      	b.n	8005ae0 <_printf_i+0x130>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6826      	ldr	r6, [r4, #0]
 8005b6c:	6961      	ldr	r1, [r4, #20]
 8005b6e:	1d18      	adds	r0, r3, #4
 8005b70:	6028      	str	r0, [r5, #0]
 8005b72:	0635      	lsls	r5, r6, #24
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0x1cc>
 8005b78:	6019      	str	r1, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0x1d2>
 8005b7c:	0670      	lsls	r0, r6, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0x1c8>
 8005b80:	8019      	strh	r1, [r3, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	4615      	mov	r5, r2
 8005b88:	e7ba      	b.n	8005b00 <_printf_i+0x150>
 8005b8a:	682b      	ldr	r3, [r5, #0]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	602a      	str	r2, [r5, #0]
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	2100      	movs	r1, #0
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7fa fb2a 	bl	80001f0 <memchr>
 8005b9c:	b108      	cbz	r0, 8005ba2 <_printf_i+0x1f2>
 8005b9e:	1b40      	subs	r0, r0, r5
 8005ba0:	6060      	str	r0, [r4, #4]
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bac:	e7a8      	b.n	8005b00 <_printf_i+0x150>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	47d0      	blx	sl
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d0ab      	beq.n	8005b14 <_printf_i+0x164>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	079b      	lsls	r3, r3, #30
 8005bc0:	d413      	bmi.n	8005bea <_printf_i+0x23a>
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	bfb8      	it	lt
 8005bca:	4618      	movlt	r0, r3
 8005bcc:	e7a4      	b.n	8005b18 <_printf_i+0x168>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	47d0      	blx	sl
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d09b      	beq.n	8005b14 <_printf_i+0x164>
 8005bdc:	3501      	adds	r5, #1
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	9903      	ldr	r1, [sp, #12]
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dcf2      	bgt.n	8005bce <_printf_i+0x21e>
 8005be8:	e7eb      	b.n	8005bc2 <_printf_i+0x212>
 8005bea:	2500      	movs	r5, #0
 8005bec:	f104 0619 	add.w	r6, r4, #25
 8005bf0:	e7f5      	b.n	8005bde <_printf_i+0x22e>
 8005bf2:	bf00      	nop
 8005bf4:	08005fd1 	.word	0x08005fd1
 8005bf8:	08005fe2 	.word	0x08005fe2

08005bfc <memmove>:
 8005bfc:	4288      	cmp	r0, r1
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	eb01 0402 	add.w	r4, r1, r2
 8005c04:	d902      	bls.n	8005c0c <memmove+0x10>
 8005c06:	4284      	cmp	r4, r0
 8005c08:	4623      	mov	r3, r4
 8005c0a:	d807      	bhi.n	8005c1c <memmove+0x20>
 8005c0c:	1e43      	subs	r3, r0, #1
 8005c0e:	42a1      	cmp	r1, r4
 8005c10:	d008      	beq.n	8005c24 <memmove+0x28>
 8005c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c1a:	e7f8      	b.n	8005c0e <memmove+0x12>
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4601      	mov	r1, r0
 8005c20:	428a      	cmp	r2, r1
 8005c22:	d100      	bne.n	8005c26 <memmove+0x2a>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c2e:	e7f7      	b.n	8005c20 <memmove+0x24>

08005c30 <_free_r>:
 8005c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d044      	beq.n	8005cc0 <_free_r+0x90>
 8005c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3a:	9001      	str	r0, [sp, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c42:	bfb8      	it	lt
 8005c44:	18e4      	addlt	r4, r4, r3
 8005c46:	f000 f913 	bl	8005e70 <__malloc_lock>
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <_free_r+0x94>)
 8005c4c:	9801      	ldr	r0, [sp, #4]
 8005c4e:	6813      	ldr	r3, [r2, #0]
 8005c50:	b933      	cbnz	r3, 8005c60 <_free_r+0x30>
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6014      	str	r4, [r2, #0]
 8005c56:	b003      	add	sp, #12
 8005c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c5c:	f000 b90e 	b.w	8005e7c <__malloc_unlock>
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d908      	bls.n	8005c76 <_free_r+0x46>
 8005c64:	6825      	ldr	r5, [r4, #0]
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf01      	itttt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	1949      	addeq	r1, r1, r5
 8005c72:	6021      	streq	r1, [r4, #0]
 8005c74:	e7ed      	b.n	8005c52 <_free_r+0x22>
 8005c76:	461a      	mov	r2, r3
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b10b      	cbz	r3, 8005c80 <_free_r+0x50>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d9fa      	bls.n	8005c76 <_free_r+0x46>
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	1855      	adds	r5, r2, r1
 8005c84:	42a5      	cmp	r5, r4
 8005c86:	d10b      	bne.n	8005ca0 <_free_r+0x70>
 8005c88:	6824      	ldr	r4, [r4, #0]
 8005c8a:	4421      	add	r1, r4
 8005c8c:	1854      	adds	r4, r2, r1
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	d1e0      	bne.n	8005c56 <_free_r+0x26>
 8005c94:	681c      	ldr	r4, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	4421      	add	r1, r4
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	e7da      	b.n	8005c56 <_free_r+0x26>
 8005ca0:	d902      	bls.n	8005ca8 <_free_r+0x78>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	6003      	str	r3, [r0, #0]
 8005ca6:	e7d6      	b.n	8005c56 <_free_r+0x26>
 8005ca8:	6825      	ldr	r5, [r4, #0]
 8005caa:	1961      	adds	r1, r4, r5
 8005cac:	428b      	cmp	r3, r1
 8005cae:	bf04      	itt	eq
 8005cb0:	6819      	ldreq	r1, [r3, #0]
 8005cb2:	685b      	ldreq	r3, [r3, #4]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	bf04      	itt	eq
 8005cb8:	1949      	addeq	r1, r1, r5
 8005cba:	6021      	streq	r1, [r4, #0]
 8005cbc:	6054      	str	r4, [r2, #4]
 8005cbe:	e7ca      	b.n	8005c56 <_free_r+0x26>
 8005cc0:	b003      	add	sp, #12
 8005cc2:	bd30      	pop	{r4, r5, pc}
 8005cc4:	20004a44 	.word	0x20004a44

08005cc8 <sbrk_aligned>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4e0e      	ldr	r6, [pc, #56]	; (8005d04 <sbrk_aligned+0x3c>)
 8005ccc:	460c      	mov	r4, r1
 8005cce:	6831      	ldr	r1, [r6, #0]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	b911      	cbnz	r1, 8005cda <sbrk_aligned+0x12>
 8005cd4:	f000 f8bc 	bl	8005e50 <_sbrk_r>
 8005cd8:	6030      	str	r0, [r6, #0]
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f8b7 	bl	8005e50 <_sbrk_r>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	d00a      	beq.n	8005cfc <sbrk_aligned+0x34>
 8005ce6:	1cc4      	adds	r4, r0, #3
 8005ce8:	f024 0403 	bic.w	r4, r4, #3
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d007      	beq.n	8005d00 <sbrk_aligned+0x38>
 8005cf0:	1a21      	subs	r1, r4, r0
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f8ac 	bl	8005e50 <_sbrk_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d101      	bne.n	8005d00 <sbrk_aligned+0x38>
 8005cfc:	f04f 34ff 	mov.w	r4, #4294967295
 8005d00:	4620      	mov	r0, r4
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	20004a48 	.word	0x20004a48

08005d08 <_malloc_r>:
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	1ccd      	adds	r5, r1, #3
 8005d0e:	f025 0503 	bic.w	r5, r5, #3
 8005d12:	3508      	adds	r5, #8
 8005d14:	2d0c      	cmp	r5, #12
 8005d16:	bf38      	it	cc
 8005d18:	250c      	movcc	r5, #12
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	db01      	blt.n	8005d24 <_malloc_r+0x1c>
 8005d20:	42a9      	cmp	r1, r5
 8005d22:	d905      	bls.n	8005d30 <_malloc_r+0x28>
 8005d24:	230c      	movs	r3, #12
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	2600      	movs	r6, #0
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d30:	4e2e      	ldr	r6, [pc, #184]	; (8005dec <_malloc_r+0xe4>)
 8005d32:	f000 f89d 	bl	8005e70 <__malloc_lock>
 8005d36:	6833      	ldr	r3, [r6, #0]
 8005d38:	461c      	mov	r4, r3
 8005d3a:	bb34      	cbnz	r4, 8005d8a <_malloc_r+0x82>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f7ff ffc2 	bl	8005cc8 <sbrk_aligned>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	4604      	mov	r4, r0
 8005d48:	d14d      	bne.n	8005de6 <_malloc_r+0xde>
 8005d4a:	6834      	ldr	r4, [r6, #0]
 8005d4c:	4626      	mov	r6, r4
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d140      	bne.n	8005dd4 <_malloc_r+0xcc>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	4631      	mov	r1, r6
 8005d56:	4638      	mov	r0, r7
 8005d58:	eb04 0803 	add.w	r8, r4, r3
 8005d5c:	f000 f878 	bl	8005e50 <_sbrk_r>
 8005d60:	4580      	cmp	r8, r0
 8005d62:	d13a      	bne.n	8005dda <_malloc_r+0xd2>
 8005d64:	6821      	ldr	r1, [r4, #0]
 8005d66:	3503      	adds	r5, #3
 8005d68:	1a6d      	subs	r5, r5, r1
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	4629      	mov	r1, r5
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff ffa5 	bl	8005cc8 <sbrk_aligned>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d02b      	beq.n	8005dda <_malloc_r+0xd2>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	442b      	add	r3, r5
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	e00e      	b.n	8005da8 <_malloc_r+0xa0>
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	1b52      	subs	r2, r2, r5
 8005d8e:	d41e      	bmi.n	8005dce <_malloc_r+0xc6>
 8005d90:	2a0b      	cmp	r2, #11
 8005d92:	d916      	bls.n	8005dc2 <_malloc_r+0xba>
 8005d94:	1961      	adds	r1, r4, r5
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	6025      	str	r5, [r4, #0]
 8005d9a:	bf18      	it	ne
 8005d9c:	6059      	strne	r1, [r3, #4]
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	bf08      	it	eq
 8005da2:	6031      	streq	r1, [r6, #0]
 8005da4:	5162      	str	r2, [r4, r5]
 8005da6:	604b      	str	r3, [r1, #4]
 8005da8:	4638      	mov	r0, r7
 8005daa:	f104 060b 	add.w	r6, r4, #11
 8005dae:	f000 f865 	bl	8005e7c <__malloc_unlock>
 8005db2:	f026 0607 	bic.w	r6, r6, #7
 8005db6:	1d23      	adds	r3, r4, #4
 8005db8:	1af2      	subs	r2, r6, r3
 8005dba:	d0b6      	beq.n	8005d2a <_malloc_r+0x22>
 8005dbc:	1b9b      	subs	r3, r3, r6
 8005dbe:	50a3      	str	r3, [r4, r2]
 8005dc0:	e7b3      	b.n	8005d2a <_malloc_r+0x22>
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	bf0c      	ite	eq
 8005dc8:	6032      	streq	r2, [r6, #0]
 8005dca:	605a      	strne	r2, [r3, #4]
 8005dcc:	e7ec      	b.n	8005da8 <_malloc_r+0xa0>
 8005dce:	4623      	mov	r3, r4
 8005dd0:	6864      	ldr	r4, [r4, #4]
 8005dd2:	e7b2      	b.n	8005d3a <_malloc_r+0x32>
 8005dd4:	4634      	mov	r4, r6
 8005dd6:	6876      	ldr	r6, [r6, #4]
 8005dd8:	e7b9      	b.n	8005d4e <_malloc_r+0x46>
 8005dda:	230c      	movs	r3, #12
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4638      	mov	r0, r7
 8005de0:	f000 f84c 	bl	8005e7c <__malloc_unlock>
 8005de4:	e7a1      	b.n	8005d2a <_malloc_r+0x22>
 8005de6:	6025      	str	r5, [r4, #0]
 8005de8:	e7de      	b.n	8005da8 <_malloc_r+0xa0>
 8005dea:	bf00      	nop
 8005dec:	20004a44 	.word	0x20004a44

08005df0 <_realloc_r>:
 8005df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df4:	4680      	mov	r8, r0
 8005df6:	4614      	mov	r4, r2
 8005df8:	460e      	mov	r6, r1
 8005dfa:	b921      	cbnz	r1, 8005e06 <_realloc_r+0x16>
 8005dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e00:	4611      	mov	r1, r2
 8005e02:	f7ff bf81 	b.w	8005d08 <_malloc_r>
 8005e06:	b92a      	cbnz	r2, 8005e14 <_realloc_r+0x24>
 8005e08:	f7ff ff12 	bl	8005c30 <_free_r>
 8005e0c:	4625      	mov	r5, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e14:	f000 f838 	bl	8005e88 <_malloc_usable_size_r>
 8005e18:	4284      	cmp	r4, r0
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	d802      	bhi.n	8005e24 <_realloc_r+0x34>
 8005e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e22:	d812      	bhi.n	8005e4a <_realloc_r+0x5a>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff ff6e 	bl	8005d08 <_malloc_r>
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d0ed      	beq.n	8005e0e <_realloc_r+0x1e>
 8005e32:	42bc      	cmp	r4, r7
 8005e34:	4622      	mov	r2, r4
 8005e36:	4631      	mov	r1, r6
 8005e38:	bf28      	it	cs
 8005e3a:	463a      	movcs	r2, r7
 8005e3c:	f7ff fbb8 	bl	80055b0 <memcpy>
 8005e40:	4631      	mov	r1, r6
 8005e42:	4640      	mov	r0, r8
 8005e44:	f7ff fef4 	bl	8005c30 <_free_r>
 8005e48:	e7e1      	b.n	8005e0e <_realloc_r+0x1e>
 8005e4a:	4635      	mov	r5, r6
 8005e4c:	e7df      	b.n	8005e0e <_realloc_r+0x1e>
	...

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d06      	ldr	r5, [pc, #24]	; (8005e6c <_sbrk_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fa feac 	bl	8000bb8 <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20004a4c 	.word	0x20004a4c

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_lock+0x8>)
 8005e72:	f000 b811 	b.w	8005e98 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20004a50 	.word	0x20004a50

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f000 b80c 	b.w	8005e9a <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20004a50 	.word	0x20004a50

08005e88 <_malloc_usable_size_r>:
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f18      	subs	r0, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfbc      	itt	lt
 8005e92:	580b      	ldrlt	r3, [r1, r0]
 8005e94:	18c0      	addlt	r0, r0, r3
 8005e96:	4770      	bx	lr

08005e98 <__retarget_lock_acquire_recursive>:
 8005e98:	4770      	bx	lr

08005e9a <__retarget_lock_release_recursive>:
 8005e9a:	4770      	bx	lr

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
