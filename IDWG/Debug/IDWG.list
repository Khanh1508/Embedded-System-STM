
IDWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000660  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f8  080007f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f8  080007f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080007f8  080007f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f8  080007f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f8  080007f8  000107f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007fc  080007fc  000107fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800080c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800080c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c7b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b24  00000000  00000000  00022cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000370  00000000  00000000  000237e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f8  00000000  00000000  00023b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141e4  00000000  00000000  00023e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003caa  00000000  00000000  0003802c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eff4  00000000  00000000  0003bcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bacca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be0  00000000  00000000  000bad1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080007e0 	.word	0x080007e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080007e0 	.word	0x080007e0

080001d8 <gpio_d12_init>:
#include "main.h"

void gpio_d12_init()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <gpio_d12_init+0x4c>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e6:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <gpio_d12_init+0x4c>)
 80001e8:	f043 0308 	orr.w	r3, r3, #8
 80001ec:	6313      	str	r3, [r2, #48]	; 0x30
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <gpio_d12_init+0x4c>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	f003 0308 	and.w	r3, r3, #8
 80001f6:	603b      	str	r3, [r7, #0]
 80001f8:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER =(uint32_t*)0x40020c00;// tro toi dia chi Moder
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <gpio_d12_init+0x50>)
 80001fc:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0b11<<26);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= 0b01<<26;//Set PD13
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020c00 	.word	0x40020c00

0800022c <gpio_button_init>:

/* READ BUTTON Function*/
void gpio_button_init()
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <gpio_button_init+0x50>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023a:	4a10      	ldr	r2, [pc, #64]	; (800027c <gpio_button_init+0x50>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6313      	str	r3, [r2, #48]	; 0x30
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <gpio_button_init+0x50>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
uint32_t* GPIOA_MODER=0x40020000;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <gpio_button_init+0x54>)
 8000250:	60fb      	str	r3, [r7, #12]
*GPIOA_MODER &= ~(0b11<<0);//clear -set PA0 as input
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f023 0203 	bic.w	r2, r3, #3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]

uint32_t* GPIOA_PUPDR=0x4002000c;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <gpio_button_init+0x58>)
 8000260:	60bb      	str	r3, [r7, #8]
*GPIOA_PUPDR &= ~(0b11<<0);  //set floating
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 0203 	bic.w	r2, r3, #3
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020000 	.word	0x40020000
 8000284:	4002000c 	.word	0x4002000c

08000288 <gpio_button_read>:

int gpio_button_read()
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
  uint32_t* GPIOA_IDR=(uint32_t*)0x40020010;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <gpio_button_read+0x28>)
 8000290:	607b      	str	r3, [r7, #4]
  if((*GPIOA_IDR>>0 & 1)==1)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <gpio_button_read+0x1a>
    return 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <gpio_button_read+0x1c>
  else
    return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40020010 	.word	0x40020010

080002b4 <rcc_init>:

void rcc_init()
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
	uint32_t* CSR=(uint32_t*)0x40023874;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <rcc_init+0x4c>)
 80002bc:	60fb      	str	r3, [r7, #12]
	*CSR|=(1<<0);//LSI ON
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0201 	orr.w	r2, r3, #1
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]
//	uint32_t* CR=(uint32_t*)0x40023800;
//	*CR|=(0b01<<21);//



	uint32_t* KR=(uint32_t*)0x40003000;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <rcc_init+0x50>)
 80002cc:	60bb      	str	r3, [r7, #8]
	*KR=0x5555;//unlock PR and RLR register
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	f245 5255 	movw	r2, #21845	; 0x5555
 80002d4:	601a      	str	r2, [r3, #0]

	uint32_t* PR=(uint32_t*)0x40003004;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <rcc_init+0x54>)
 80002d8:	607b      	str	r3, [r7, #4]
	*PR=29-1; // Divide 32KHZ  1/32.10^-3 =31,35 ms-> /30 =1,0416 ms
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	221c      	movs	r2, #28
 80002de:	601a      	str	r2, [r3, #0]
	//*PR=(3<<0);
	uint32_t* RLR=(uint32_t*)0x40003008;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <rcc_init+0x58>)
 80002e2:	603b      	str	r3, [r7, #0]
	*RLR=4000;// thres value 4000ms
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80002ea:	601a      	str	r2, [r3, #0]

	*KR=0xCCCC;//Enable
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80002f2:	601a      	str	r2, [r3, #0]


}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40023874 	.word	0x40023874
 8000304:	40003000 	.word	0x40003000
 8000308:	40003004 	.word	0x40003004
 800030c:	40003008 	.word	0x40003008

08000310 <main>:

int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  HAL_Init();
 8000314:	f000 f8aa 	bl	800046c <HAL_Init>
  gpio_d12_init();
 8000318:	f7ff ff5e 	bl	80001d8 <gpio_d12_init>
  gpio_button_init();
 800031c:	f7ff ff86 	bl	800022c <gpio_button_init>
  rcc_init();
 8000320:	f7ff ffc8 	bl	80002b4 <rcc_init>

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000328:	4807      	ldr	r0, [pc, #28]	; (8000348 <main+0x38>)
 800032a:	f000 fa1a 	bl	8000762 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800032e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000332:	f000 f90d 	bl	8000550 <HAL_Delay>
	  if(gpio_button_read(GPIOA, GPIO_PIN_0)==1) //If press button, program will be stacked-->after 4S Led On again
 8000336:	2101      	movs	r1, #1
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <main+0x3c>)
 800033a:	f7ff ffa5 	bl	8000288 <gpio_button_read>
 800033e:	4603      	mov	r3, r0
 8000340:	2b01      	cmp	r3, #1
 8000342:	d1ef      	bne.n	8000324 <main+0x14>
	  {
		  while(1);
 8000344:	e7fe      	b.n	8000344 <main+0x34>
 8000346:	bf00      	nop
 8000348:	40020c00 	.word	0x40020c00
 800034c:	40020000 	.word	0x40020000

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000356:	2300      	movs	r3, #0
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <HAL_MspInit+0x4c>)
 800035c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <HAL_MspInit+0x4c>)
 8000360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000364:	6453      	str	r3, [r2, #68]	; 0x44
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <HAL_MspInit+0x4c>)
 8000368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800036a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <HAL_MspInit+0x4c>)
 8000378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <HAL_MspInit+0x4c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	6413      	str	r3, [r2, #64]	; 0x40
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <HAL_MspInit+0x4c>)
 8000384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800038e:	2007      	movs	r0, #7
 8000390:	f000 f9b4 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40023800 	.word	0x40023800

080003a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <NMI_Handler+0x4>

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <HardFault_Handler+0x4>

080003ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>

080003b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <BusFault_Handler+0x4>

080003b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <UsageFault_Handler+0x4>

080003be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ec:	f000 f890 	bl	8000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SystemInit+0x20>)
 80003fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <SystemInit+0x20>)
 8000400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800041e:	490e      	ldr	r1, [pc, #56]	; (8000458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000420:	4a0e      	ldr	r2, [pc, #56]	; (800045c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000434:	4c0b      	ldr	r4, [pc, #44]	; (8000464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000442:	f7ff ffd7 	bl	80003f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000446:	f000 f9a7 	bl	8000798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800044a:	f7ff ff61 	bl	8000310 <main>
  bx  lr    
 800044e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800045c:	08000800 	.word	0x08000800
  ldr r2, =_sbss
 8000460:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000464:	2000002c 	.word	0x2000002c

08000468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <HAL_Init+0x40>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <HAL_Init+0x40>)
 8000476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800047a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <HAL_Init+0x40>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <HAL_Init+0x40>)
 8000482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_Init+0x40>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a07      	ldr	r2, [pc, #28]	; (80004ac <HAL_Init+0x40>)
 800048e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000494:	2003      	movs	r0, #3
 8000496:	f000 f931 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800049a:	2000      	movs	r0, #0
 800049c:	f000 f808 	bl	80004b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004a0:	f7ff ff56 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a4:	2300      	movs	r3, #0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40023c00 	.word	0x40023c00

080004b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_InitTick+0x54>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_InitTick+0x58>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f93b 	bl	800074a <HAL_SYSTICK_Config>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004da:	2301      	movs	r3, #1
 80004dc:	e00e      	b.n	80004fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b0f      	cmp	r3, #15
 80004e2:	d80a      	bhi.n	80004fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e4:	2200      	movs	r2, #0
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f000 f911 	bl	8000712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <HAL_InitTick+0x5c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	e000      	b.n	80004fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000000 	.word	0x20000000
 8000508:	20000008 	.word	0x20000008
 800050c:	20000004 	.word	0x20000004

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_IncTick+0x20>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x24>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_IncTick+0x24>)
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000008 	.word	0x20000008
 8000534:	20000028 	.word	0x20000028

08000538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return uwTick;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <HAL_GetTick+0x14>)
 800053e:	681b      	ldr	r3, [r3, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000558:	f7ff ffee 	bl	8000538 <HAL_GetTick>
 800055c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	d005      	beq.n	8000576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_Delay+0x44>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4413      	add	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000576:	bf00      	nop
 8000578:	f7ff ffde 	bl	8000538 <HAL_GetTick>
 800057c:	4602      	mov	r2, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	429a      	cmp	r2, r3
 8000586:	d8f7      	bhi.n	8000578 <HAL_Delay+0x28>
  {
  }
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000008 	.word	0x20000008

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	; 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c8:	d301      	bcc.n	80006ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00f      	b.n	80006ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <SysTick_Config+0x40>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d6:	210f      	movs	r1, #15
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f7ff ff8e 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SysTick_Config+0x40>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <SysTick_Config+0x40>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff47 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000712:	b580      	push	{r7, lr}
 8000714:	b086      	sub	sp, #24
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000724:	f7ff ff5c 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 8000728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ff8e 	bl	8000650 <NVIC_EncodePriority>
 8000734:	4602      	mov	r2, r0
 8000736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff5d 	bl	80005fc <__NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ffb0 	bl	80006b8 <SysTick_Config>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000762:	b480      	push	{r7}
 8000764:	b085      	sub	sp, #20
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000774:	887a      	ldrh	r2, [r7, #2]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4013      	ands	r3, r2
 800077a:	041a      	lsls	r2, r3, #16
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	43d9      	mvns	r1, r3
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	400b      	ands	r3, r1
 8000784:	431a      	orrs	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	619a      	str	r2, [r3, #24]
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <__libc_init_array>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4d0d      	ldr	r5, [pc, #52]	; (80007d0 <__libc_init_array+0x38>)
 800079c:	4c0d      	ldr	r4, [pc, #52]	; (80007d4 <__libc_init_array+0x3c>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	2600      	movs	r6, #0
 80007a4:	42a6      	cmp	r6, r4
 80007a6:	d109      	bne.n	80007bc <__libc_init_array+0x24>
 80007a8:	4d0b      	ldr	r5, [pc, #44]	; (80007d8 <__libc_init_array+0x40>)
 80007aa:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <__libc_init_array+0x44>)
 80007ac:	f000 f818 	bl	80007e0 <_init>
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	10a4      	asrs	r4, r4, #2
 80007b4:	2600      	movs	r6, #0
 80007b6:	42a6      	cmp	r6, r4
 80007b8:	d105      	bne.n	80007c6 <__libc_init_array+0x2e>
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c0:	4798      	blx	r3
 80007c2:	3601      	adds	r6, #1
 80007c4:	e7ee      	b.n	80007a4 <__libc_init_array+0xc>
 80007c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ca:	4798      	blx	r3
 80007cc:	3601      	adds	r6, #1
 80007ce:	e7f2      	b.n	80007b6 <__libc_init_array+0x1e>
 80007d0:	080007f8 	.word	0x080007f8
 80007d4:	080007f8 	.word	0x080007f8
 80007d8:	080007f8 	.word	0x080007f8
 80007dc:	080007fc 	.word	0x080007fc

080007e0 <_init>:
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	bf00      	nop
 80007e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e6:	bc08      	pop	{r3}
 80007e8:	469e      	mov	lr, r3
 80007ea:	4770      	bx	lr

080007ec <_fini>:
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ee:	bf00      	nop
 80007f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f2:	bc08      	pop	{r3}
 80007f4:	469e      	mov	lr, r3
 80007f6:	4770      	bx	lr
